{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#what-does-the-compiler-do\",\"depth\":3,\"text\":\"编译器是做什么的？ \"},{\"url\":\"#what-does-the-compiler-assume\",\"depth\":3,\"text\":\"编译器假设什么？ \"},{\"url\":\"#should-i-try-out-the-compiler\",\"depth\":3,\"text\":\"我应该尝试一下编译器吗？ \"},{\"url\":\"#getting-started\",\"depth\":2,\"text\":\"开始 \"},{\"url\":\"#checking-compatibility\",\"depth\":3,\"text\":\"检查兼容性 \"},{\"url\":\"#installing-eslint-plugin-react-compiler\",\"depth\":3,\"text\":\"安装 eslint-plugin-react-compiler \"},{\"url\":\"#using-the-compiler-effectively\",\"depth\":3,\"text\":\"将编译器应用到你的代码库 \"},{\"url\":\"#installation\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#usage-with-babel\",\"depth\":3,\"text\":\"Babel \"},{\"url\":\"#usage-with-vite\",\"depth\":3,\"text\":\"Vite \"},{\"url\":\"#usage-with-nextjs\",\"depth\":3,\"text\":\"Next.js \"},{\"url\":\"#usage-with-remix\",\"depth\":3,\"text\":\"Remix \"},{\"url\":\"#usage-with-webpack\",\"depth\":3,\"text\":\"Webpack \"},{\"url\":\"#usage-with-expo\",\"depth\":3,\"text\":\"Expo \"},{\"url\":\"#usage-with-react-native-metro\",\"depth\":3,\"text\":\"Metro (React Native) \"},{\"url\":\"#usage-with-rspack\",\"depth\":3,\"text\":\"Rspack \"},{\"url\":\"#usage-with-rsbuild\",\"depth\":3,\"text\":\"Rsbuild \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"疑难解答 \"},{\"url\":\"#0--_c-is-not-a-function-error\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"(0 , _c) is not a function\"}],\" error \"]},{\"url\":\"#how-do-i-know-my-components-have-been-optimized\",\"depth\":3,\"text\":\"我如何知道我的组件已被优化？ \"},{\"url\":\"#something-is-not-working-after-compilation\",\"depth\":3,\"text\":\"编译后某些内容无法正常工作 \"},{\"url\":\"#other-issues\",\"depth\":3,\"text\":\"其他问题 \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"本页面将为你介绍新的实验性 React Compiler，以及如何成功试用。\"}]}],\"\\n\",[\"$r\",\"Wip\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"这些文档仍在不断完善中。更多文档可在 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-compiler/discussions\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Compiler 工作组代码库\"}],\" 中找到，并在这些文档更加稳定时被整合进来。\"]}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"开始使用 React Compiler\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"安装 React Compiler 和 ESLint 插件\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"疑难解答\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"React Compiler 是一个新的实验性编译器，我们已经将其开源，以便从社区中获得早期反馈。它仍然存在一些问题，所以还没有完全准备好投入生产。\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React Compiler 是一个新的实验性编译器，我们已经将其开源，以便从社区中获得早期反馈。它是一个仅在构建时使用的工具，可以自动优化你的 React 应用程序。它可以与纯 JavaScript 一起使用，并且了解 \",[\"$r\",\"a\",null,{\"href\":\"/reference/rules\",\"children\":\"React 规则\"}],\"，因此你无需重写任何代码即可使用它。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"编译器还包括一个 \",[\"$r\",\"a\",null,{\"href\":\"#installing-eslint-plugin-react-compiler\",\"children\":\"ESLint 插件\"}],\"，可以在你的编辑器中直接显示编译器的分析结果。该插件独立运行，即使你的应用程序中没有使用编译器也可以使用。我们建议所有 React 开发人员使用这个 ESLint 插件来帮助提高代码库的质量。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"what-does-the-compiler-do\",\"children\":\"编译器是做什么的？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了优化应用程序，React Compiler 会自动对你的代码进行记忆化处理。你可能已经熟悉了像 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"useCallback\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"React.memo\"}],\" 这样的 API，通过这些 API，你可以告诉 React，如果输入没有发生变化，应用程序的某些部分不需要重新计算，从而减少更新时的工作量。虽然这些功能很强大，但很容易忘记应用记忆化或者错误地应用它们。这可能会导致更新效率低下，因为 React 必须检查 UI 中没有任何\",[\"$r\",\"strong\",null,{\"children\":\"有意义\"}],\"的更改的部分。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"编译器利用其对 JavaScript 和 React 规则的了解，自动对组件和钩子中的值或值组进行记忆化。如果它检测到规则的破坏，它将自动跳过那些组件或钩子，并继续安全地编译其他代码。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你的代码库已经非常好地进行了记忆化处理，你可能不会指望通过编译器看到主要的性能改进。然而，在实践中，手动正确记忆化导致性能问题的依赖关系是很棘手的。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"what-kind-of-memoization-does-react-compiler-add\",\"children\":\"React Compiler 添加了什么样的记忆？ \"}],[\"$r\",\"p\",null,{\"children\":[\"React 编译器的初始版本主要专注于\",[\"$r\",\"strong\",null,{\"children\":\"改善更新性能\"}],\"（重新渲染现有组件），因此它专注于以下两种用例：\"]}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"跳过组件的级联重新渲染\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"重新渲染 \",[\"$r\",\"code\",null,{\"children\":\"<Parent />\"}],\" 会导致其组件树中的许多组件重新渲染，即使只有 \",[\"$r\",\"code\",null,{\"children\":\"<Parent />\"}],\" 发生了变化\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"从 React 外部跳过昂贵计算\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"例如，在需要该数据的组件或钩子内部调用 \",[\"$r\",\"code\",null,{\"children\":\"expensivelyProcessAReallyLargeArrayOfObjects()\"}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"h4\",null,{\"id\":\"optimizing-re-renders\",\"children\":\"优化重新渲染 \"}],[\"$r\",\"p\",null,{\"children\":[\"React 允许你将你的 UI 表达为它们当前状态的函数（更具体地说：它们的属性、状态和上下文）。在当前的实现中，当组件的状态发生变化时，React 将重新渲染该组件及其\",[\"$r\",\"strong\",null,{\"children\":\"所有子组件\"}],\"——除非你使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo()\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"useCallback()\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"React.memo()\"}],\" 应用了某种形式的手动记忆。例如，在以下示例中，每当 \",[\"$r\",\"code\",null,{\"children\":\"<FriendList>\"}],\" 的状态发生变化时，\",[\"$r\",\"code\",null,{\"children\":\"<MessageButton>\"}],\" 将重新呈现：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-javascript\",\"children\":\"function FriendList({ friends }) {\\r\\n  const onlineCount = useFriendOnlineCount();\\r\\n  if (friends.length === 0) {\\r\\n    return <NoFriends />;\\r\\n  }\\r\\n  return (\\r\\n    <div>\\r\\n      <span>{onlineCount} online</span>\\r\\n      {friends.map((friend) => (\\r\\n        <FriendListCard key={friend.id} friend={friend} />\\r\\n      ))}\\r\\n      <MessageButton />\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://playground.react.dev/#N4Igzg9grgTgxgUxALhAMygOzgFwJYSYAEAYjHgpgCYAyeYOAFMEWuZVWEQL4CURwADrEicQgyKEANnkwIAwtEw4iAXiJQwCMhWoB5TDLmKsTXgG5hRInjRFGbXZwB0UygHMcACzWr1ABn4hEWsYBBxYYgAeADkIHQ4uAHoAPksRbisiMIiYYkYs6yiqPAA3FMLrIiiwAAcAQ0wU4GlZBSUcbklDNqikusaKkKrgR0TnAFt62sYHdmp+VRT7SqrqhOo6Bnl6mCoiAGsEAE9VUfmqZzwqLrHqM7ubolTVol5eTOGigFkEMDB6u4EAAhKA4HCEZ5DNZ9ErlLIWYTcEDcIA\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"strong\",null,{\"children\":\"在 React Compiler Playground 中查看此示例\"}]}]}],[\"$r\",\"p\",null,{\"children\":[\"React Compiler 会自动应用等效的手动记忆，确保只有应用的相关部分在状态发生变化时重新渲染，这有时被称为“细粒度反应”。在上面的例子中，React Compiler 确定 \",[\"$r\",\"code\",null,{\"children\":\"<FriendListCard />\"}],\" 的返回值即使在 \",[\"$r\",\"code\",null,{\"children\":\"friends\"}],\" 发生变化时也可以重用，并且可以避免重新创建此 JSX，\",[\"$r\",\"strong\",null,{\"children\":\"并\"}],\"避免在 \",[\"$r\",\"code\",null,{\"children\":\"onlineCount\"}],\" 变化时重新渲染 \",[\"$r\",\"code\",null,{\"children\":\"<MessageButton>\"}],\"。\"]}],[\"$r\",\"h4\",null,{\"id\":\"expensive-calculations-also-get-memoized\",\"children\":\"昂贵计算也会被记忆 \"}],[\"$r\",\"p\",null,{\"children\":\"编译器还可以自动记忆渲染过程中使用的昂贵计算：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 由于这不是组件或钩子，React Compiler 不会进行记忆\\r\\nfunction expensivelyProcessAReallyLargeArrayOfObjects() { /* ... */ }\\r\\n\\r\\n// 由 React Compiler 进行了记忆化，因为这是一个组件\\r\\nfunction TableContainer({ items }) {\\r\\n  // 这个函数调用将被记忆：\\r\\n  const data = expensivelyProcessAReallyLargeArrayOfObjects(items);\\r\\n  // ...\\r\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://playground.react.dev/#N4Igzg9grgTgxgUxALhAejQAgFTYHIQAuumAtgqRAJYBeCAJpgEYCemASggIZyGYDCEUgAcqAGwQwANJjBUAdokyEAFlTCZ1meUUxdMcIcIjyE8vhBiYVECAGsAOvIBmURYSonMCAB7CzcgBuCGIsAAowEIhgYACCnFxioQAyXDAA5gixMDBcLADyzvlMAFYIvGAAFACUmMCYaNiYAHStOFgAvk5OGJgAshTUdIysHNy8AkbikrIKSqpaWvqGIiZmhE6u7p7ymAAqXEwSguZcCpKV9VSEFBodtcBOmAYmYHz0XIT6ALzefgFUYKhCJRBAxeLcJIsVIZLI5PKFYplCqVa63aoAbm6u0wMAQhFguwAPPRAQA+YAfL4dIloUmBMlODogDpAA\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"strong\",null,{\"children\":\"在 React Compiler Playground 中查看此示例\"}]}]}],[\"$r\",\"p\",null,{\"children\":[\"但是，如果 \",[\"$r\",\"code\",null,{\"children\":\"expensivelyProcessAReallyLargeArrayOfObjects\"}],\" 确实是一个昂贵的函数，你可能需要考虑在 React 之外实现它自己的记忆，因为：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React Compiler 只记住 React 组件和钩子，而不是每个函数\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React Compiler 的记忆不会在多个组件或钩子之间共享\"}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"因此，如果在许多不同的组件中使用 \",[\"$r\",\"code\",null,{\"children\":\"expensivelyProcessAReallyLargeArrayOfObjects\"}],\"，即使传递相同的 \",[\"$r\",\"code\",null,{\"children\":\"items\"}],\"，那昂贵的计算也会被重复运行。我们建议先进行 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useMemo#how-to-tell-if-a-calculation-is-expensive\",\"children\":\"性能分析\"}],\"，看看是否真的那么昂贵，然后再使代码更加复杂。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"what-does-the-compiler-assume\",\"children\":\"编译器假设什么？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React Compiler 假设你的代码：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"是有效的，语义化的 JavaScript\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在访问可空/可选值和属性之前，测试它们是否已定义（例如，如果使用 TypeScript，则启用 \",[\"$r\",\"a\",null,{\"href\":\"https://www.typescriptlang.org/tsconfig/#strictNullChecks\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"strictNullChecks\"}]}],\"），即：\",[\"$r\",\"code\",null,{\"children\":\"if (object.nullableProperty) { object.nullableProperty.foo }\"}],\" 或者使用可选链 \",[\"$r\",\"code\",null,{\"children\":\"object.nullableProperty?.foo\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"遵循 \",[\"$r\",\"a\",null,{\"href\":\"/reference/rules\",\"children\":\"React 规则\"}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React Compiler 可以静态验证 React 的许多规则，并且在检测到错误时会安全地跳过编译。要查看错误，我们建议同时安装 \",[\"$r\",\"a\",null,{\"href\":\"https://www.npmjs.com/package/eslint-plugin-react-compiler\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"eslint-plugin-react-compiler\"}],\"。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"should-i-try-out-the-compiler\",\"children\":\"我应该尝试一下编译器吗？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，编译器仍处于实验阶段，存在许多不完善之处。虽然它已经在 Meta 等公司的生产环境中使用过，但将编译器应用于你的应用程序生产环境将取决于你的代码库的健康状况以及你是否遵循了 \",[\"$r\",\"a\",null,{\"href\":\"/reference/rules\",\"children\":\"React的规则\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"你现在不必急着使用编译器。在采用它之前等到它达到稳定版本是可以的。\"}],\" 然而，我们确实赞赏在你的应用程序中进行小型实验，以便你可以向我们 \",[\"$r\",\"a\",null,{\"href\":\"#reporting-issues\",\"children\":\"提供反馈\"}],\"，帮助使编译器更好。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"getting-started\",\"children\":\"开始 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"除了这些文档之外，我们还建议查看 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-compiler\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Compiler 工作组\"}],\"，以获取有关编译器的更多信息和讨论。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"checking-compatibility\",\"children\":\"检查兼容性 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在安装编译器之前，你可以先检查你的代码库是否兼容：\"}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npx react-compiler-healthcheck@experimental\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"此脚本将：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"检查有多少个组件可以成功优化：越多越好\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"检查 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 的使用情况：启用并遵循此功能意味着遵循 \",[\"$r\",\"a\",null,{\"href\":\"/reference/rules\",\"children\":\"React 规则\"}],\" 的可能性更高\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"检查不兼容的库使用情况：与编译器不兼容的已知库\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"举个例子：\"}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"Successfully compiled 8 out of 9 components.\\r\\nStrictMode usage not found.\\r\\nFound no usage of incompatible libraries.\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"installing-eslint-plugin-react-compiler\",\"children\":\"安装 eslint-plugin-react-compiler \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React Compiler 还为 ESLint 插件提供支持。ESLint 插件可以\",[\"$r\",\"strong\",null,{\"children\":\"独立\"}],\"于编译器使用，这意味着即使你不使用编译器，也可以使用 ESLint 插件。\"]}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npm install eslint-plugin-react-compiler@experimental\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然后，将其添加到你的 ESLint 配置中：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"module.exports = {\\r\\n  plugins: [\\r\\n    'eslint-plugin-react-compiler',\\r\\n  ],\\r\\n  rules: {\\r\\n    'react-compiler/react-compiler': \\\"error\\\",\\r\\n  },\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"ESLint 插件将在编辑器中显示任何违反 React 规则的行为。当它这样做时，这意味着编译器跳过了优化该组件或钩子。这是完全可以的，编译器可以恢复并继续优化代码库中的其他组件。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"你不必立即修复所有的违反 ESLint 规则的代码。\"}],\" 你可以按照自己的节奏来处理它们，以增加被优化的组件和钩子的数量，但在你可以使用编译器之前并不需要修复所有问题。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"using-the-compiler-effectively\",\"children\":\"将编译器应用到你的代码库 \"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"existing-projects\",\"children\":\"现有项目 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"编译器旨在编译遵循 React 规则的功能组件和钩子。它还可以处理违反这些规则的代码，通过跳过这些组件或钩子来终止执行。然而，由于JavaScript的灵活性，编译器无法捕捉到每一个可能的违规行为，可能会出现错误的负面编译：也就是说，编译器可能会意外地编译出一个违反 \",[\"$r\",\"a\",null,{\"href\":\"/reference/rules\",\"children\":\"React 规则\"}],\" 的组件或钩子，这可能导致未定义的行为。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"因此，要在现有项目中成功采用编译器，我们建议你先在项目代码中的一个小目录中运行它。你可以通过将编译器配置为仅在一组特定的目录上运行来执行此操作：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"const ReactCompilerConfig = {\\r\\n  sources: (filename) => {\\r\\n    return filename.indexOf('src/path/to/dir') !== -1;\\r\\n  },\\r\\n};\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在罕见的情况下，你还可以使用 \",[\"$r\",\"code\",null,{\"children\":\"compilationMode: \\\"annotation\\\"\"}],\" 选项将编译器配置为以 “opt-in” 模式运行。这样编译器将只编译带有 \",[\"$r\",\"code\",null,{\"children\":\"\\\"use memo\\\"\"}],\" 指令的组件和钩子。请注意，\",[\"$r\",\"code\",null,{\"children\":\"annotation\"}],\" 模式是为了帮助早期采用者而设立的临时模式，我们并不打算长期使用 \",[\"$r\",\"code\",null,{\"children\":\"\\\"use memo\\\"\"}],\" 指令。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7}\",\"children\":\"const ReactCompilerConfig = {\\r\\n  compilationMode: \\\"annotation\\\",\\r\\n};\\r\\n\\r\\n// src/app.jsx\\r\\nexport default function App() {\\r\\n  \\\"use memo\\\";\\r\\n  // ...\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你对编译器的推出更有信心时，你也可以将覆盖范围扩展到其他目录，并逐渐将其推出到整个应用程序。\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"new-projects\",\"children\":\"新项目 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你正在启动一个新项目，你可以在整个代码库上启用编译器，这是默认行为。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"installation\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-babel\",\"children\":\"Babel \"}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npm install babel-plugin-react-compiler@experimental\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"编译器包含一个 Babel 插件，你可以在构建流水线中使用它来运行编译器。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"安装后，请将其添加到你的 Babel 配置中。请注意，编译器必须\",[\"$r\",\"strong\",null,{\"children\":\"首先\"}],\"在流水线中运行。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7}\",\"children\":\"// babel.config.js\\r\\nconst ReactCompilerConfig = { /* ... */ };\\r\\n\\r\\nmodule.exports = function () {\\r\\n  return {\\r\\n    plugins: [\\r\\n      ['babel-plugin-react-compiler', ReactCompilerConfig], // 必须首先运行！\\r\\n      // ...\\r\\n    ],\\r\\n  };\\r\\n};\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"babel-plugin-react-compiler\"}],\" 应该在其他 Babel 插件之前运行，因为编译器需要输入源信息进行声音分析。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React Compiler 与 React 19 RC 配合使用效果最佳。如果你无法升级，可以安装额外的 \",[\"$r\",\"code\",null,{\"children\":\"react-compiler-runtime\"}],\" 包来编译代码并在 19 之前的版本上运行。 但请注意，支持的最低版本是 17。\"]}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npm install react-compiler-runtime@experimental\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你还应该在编译器配置中添加正确的 \",[\"$r\",\"code\",null,{\"children\":\"target\"}],\"，值为你所使用的 React 大版本。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"// babel.config.js\\r\\nconst ReactCompilerConfig = {\\r\\n  target: '18' // '17' | '18' | '19'\\r\\n};\\r\\n\\r\\nmodule.exports = function () {\\r\\n  return {\\r\\n    plugins: [\\r\\n      ['babel-plugin-react-compiler', ReactCompilerConfig],\\r\\n    ],\\r\\n  };\\r\\n};\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-vite\",\"children\":\"Vite \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你使用 Vite，你可以将插件添加到 vite-plugin-react 中：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{10}\",\"children\":\"// vite.config.js\\r\\nconst ReactCompilerConfig = { /* ... */ };\\r\\n\\r\\nexport default defineConfig(() => {\\r\\n  return {\\r\\n    plugins: [\\r\\n      react({\\r\\n        babel: {\\r\\n          plugins: [\\r\\n            [\\\"babel-plugin-react-compiler\\\", ReactCompilerConfig],\\r\\n          ],\\r\\n        },\\r\\n      }),\\r\\n    ],\\r\\n    // ...\\r\\n  };\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-nextjs\",\"children\":\"Next.js \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Next.js 有一个实验性配置来启用 React 编译器。它会自动确保 Babel 已经配置了 \",[\"$r\",\"code\",null,{\"children\":\"babel-plugin-react-compiler\"}],\"。\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"安装使用 React 19 RC 版本的 Next.js canary\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"安装 \",[\"$r\",\"code\",null,{\"children\":\"babel-plugin-react-compiler\"}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npm install next@canary babel-plugin-react-compiler@experimental\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然后在 \",[\"$r\",\"code\",null,{\"children\":\"next.config.js\"}],\" 中配置实验选项：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,5,6}\",\"children\":\"// next.config.js\\r\\n/** @type {import('next').NextConfig} */\\r\\nconst nextConfig = {\\r\\n  experimental: {\\r\\n    reactCompiler: true,\\r\\n  },\\r\\n};\\r\\n\\r\\nmodule.exports = nextConfig;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"使用实验选项可确保在以下方面支持 React Compiler：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"App Router\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Pages Router\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Webpack (default)\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Turbopack (通过 \",[\"$r\",\"code\",null,{\"children\":\"--turbo\"}],\" 接入)\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-remix\",\"children\":\"Remix \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"安装 \",[\"$r\",\"code\",null,{\"children\":\"vite-plugin-babel\"}],\", 并将编译器的 Babel 插件添加到其中：\"]}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npm install vite-plugin-babel\"}]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,14}\",\"children\":\"// vite.config.js\\r\\nimport babel from \\\"vite-plugin-babel\\\";\\r\\n\\r\\nconst ReactCompilerConfig = { /* ... */ };\\r\\n\\r\\nexport default defineConfig({\\r\\n  plugins: [\\r\\n    remix({ /* ... */}),\\r\\n    babel({\\r\\n      filter: /\\\\.[jt]sx?$/,\\r\\n      babelConfig: {\\r\\n        presets: [\\\"@babel/preset-typescript\\\"], // 如果你使用 TypeScript\\r\\n        plugins: [\\r\\n          [\\\"babel-plugin-react-compiler\\\", ReactCompilerConfig],\\r\\n        ],\\r\\n      },\\r\\n    }),\\r\\n  ],\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-webpack\",\"children\":\"Webpack \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以为 React Compiler 创建自己的 loader，就像这样：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const ReactCompilerConfig = { /* ... */ };\\r\\nconst BabelPluginReactCompiler = require('babel-plugin-react-compiler');\\r\\n\\r\\nfunction reactCompilerLoader(sourceCode, sourceMap) {\\r\\n  // ...\\r\\n  const result = transformSync(sourceCode, {\\r\\n    // ...\\r\\n    plugins: [\\r\\n      [BabelPluginReactCompiler, ReactCompilerConfig],\\r\\n    ],\\r\\n  // ...\\r\\n  });\\r\\n\\r\\n  if (result === null) {\\r\\n    this.callback(\\r\\n      Error(\\r\\n        `Failed to transform \\\"${options.filename}\\\"`\\r\\n      )\\r\\n    );\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  this.callback(\\r\\n    null,\\r\\n    result.code,\\r\\n    result.map === null ? undefined : result.map\\r\\n  );\\r\\n}\\r\\n\\r\\nmodule.exports = reactCompilerLoader;\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-expo\",\"children\":\"Expo \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请参考 \",[\"$r\",\"a\",null,{\"href\":\"https://docs.expo.dev/preview/react-compiler/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Expo 文档\"}],\" 应用程序中启用和使用 React Compiler。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-react-native-metro\",\"children\":\"Metro (React Native) \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React Native 通过 Metro 使用 Babel，因此请参考 \",[\"$r\",\"a\",null,{\"href\":\"#usage-with-babel\",\"children\":\"使用 Babel\"}],\" 部分的安装说明。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-rspack\",\"children\":\"Rspack \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请参考 \",[\"$r\",\"a\",null,{\"href\":\"https://rspack.dev/guide/tech/react#react-compiler\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Rspack 文档\"}],\" 以启用并在 Rspack 应用程序中使用 React Compiler。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usage-with-rsbuild\",\"children\":\"Rsbuild \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请参考 \",[\"$r\",\"a\",null,{\"href\":\"https://rsbuild.dev/guide/framework/react#react-compiler\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Rsbuild 文档\"}],\" 以在 Rsbuild 应用程序中启用和使用 React Compiler。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"疑难解答 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请先在 \",[\"$r\",\"a\",null,{\"href\":\"https://playground.react.dev/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Compiler Playground\"}],\" 上创建一个最小的可复现问题，并将其包含在你的错误报告中。你可以在 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/facebook/react/issues\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"facebook/react\"}],\" 仓库中提交 issue。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你也可以通过申请成为成员，在 React Compiler 工作组中提供反馈意见。请查看 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-compiler\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"README\"}],\" 以获取更多加入详情。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"0--_c-is-not-a-function-error\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"(0 , _c) is not a function\"}],\" error \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你没有使用 React 19 RC 及更高版本，则会发生这种情况。要解决此问题，请先 \",[\"$r\",\"a\",null,{\"href\":\"https://react.dev/blog/2024/04/25/react-19-upgrade-guide\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"将你的项目升级到 React 19 RC\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你无法升级到 React 19，你可以尝试根据 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-compiler/discussions/6\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"工作组\"}],\" 描述的缓存功能的用户空间实现。但是，请注意这并不建议，你应尽快升级到React 19。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"how-do-i-know-my-components-have-been-optimized\",\"children\":\"我如何知道我的组件已被优化？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/react-developer-tools\",\"children\":\"React 开发工具\"}],\"（v5.0 及以上版本）对 React Compiler 有内置支持，并会在已被编译器优化的组件旁边显示“Memo ✨”徽章。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"something-is-not-working-after-compilation\",\"children\":\"编译后某些内容无法正常工作 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你安装了 eslint-plugin-react-compiler ，编译器将在你的编辑器中显示任何违反 React 规则的情况。当它这样做时，意味着编译器跳过了对该组件或钩子的优化。这完全没问题，并且编译器可以恢复并继续优化你代码库中的其他组件。\",[\"$r\",\"strong\",null,{\"children\":\"你不必立即修复所有的违反 ESLint 规则的代码。\"}],\" 你可以按照自己的节奏来处理它们，以增加被优化的组件和钩子的数量。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，由于 JavaScript 的灵活和动态性质，不可能全面检测到所有情况。在这些情况下，可能会出现错误和未定义的行为，例如无限循环。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的应用在编译后无法正常工作，并且你没有看到任何 ESLint 错误，编译器可能错误地编译了你的代码。为了确认这一点，尝试通过积极选择你认为可能相关的任何组件或钩子来解决问题，通过 \",[\"$r\",\"a\",null,{\"href\":\"#opt-out-of-the-compiler-for-a-component\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"\\\"use no memo\\\"\"}],\" 指令\"]}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function SuspiciousComponent() {\\r\\n  \\\"use no memo\\\"; // 选择不让此组件由 React Compiler 进行编译 \\r\\n  // ...\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"use-no-memo\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"\\\"use no memo\\\"\"}],\" \"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"\\\"use no memo\\\"\"}],\" 是一个\",[\"$r\",\"strong\",null,{\"children\":\"临时的\"}],\"逃避机制，它允许你选择不让组件和钩子由 React Compiler 进行编译。此指令不像例如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/rsc/use-client\",\"children\":[\"$r\",\"code\",null,{\"children\":\"\\\"use client\\\"\"}]}],\" 那样长期存在。\"]}],[\"$r\",\"p\",null,{\"children\":\"除非绝对必要，否则不建议使用这个指令。一旦你选择退出一个组件或钩子，它将永久退出，直到指令被移除。这意味着即使你修复了代码，编译器仍然会跳过编译它，除非你移除指令。\"}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你修复错误时，请确认删除退出指令是否会使问题重新出现。然后使用 \",[\"$r\",\"a\",null,{\"href\":\"https://playground.react.dev\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Compiler Playground\"}],\" 与我们分享一个错误报告（你可以尝试将其减少到一个小的重现，或者如果是开源代码，你也可以直接粘贴整个源代码），这样我们就可以识别并帮助解决问题。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"other-issues\",\"children\":\"其他问题 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请查阅 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-compiler/discussions/7\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"https://github.com/reactwg/react-compiler/discussions/7\"}],\" 。\"]}]]}]]","meta":{"title":"React Compiler"},"languages":null},"__N_SSG":true}