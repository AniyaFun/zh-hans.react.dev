{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#what-are-effects-and-how-are-they-different-from-events\",\"depth\":2,\"text\":\"什么是 Effect，它与事件（event）有何不同？ \"},{\"url\":\"#you-might-not-need-an-effect\",\"depth\":2,\"text\":\"你可能不需要 Effect \"},{\"url\":\"#how-to-write-an-effect\",\"depth\":2,\"text\":\"如何编写 Effect \"},{\"url\":\"#step-1-declare-an-effect\",\"depth\":3,\"text\":\"第一步：声明 Effect \"},{\"url\":\"#step-2-specify-the-effect-dependencies\",\"depth\":3,\"text\":\"第二步：指定 Effect 的依赖项 \"},{\"url\":\"#step-3-add-cleanup-if-needed\",\"depth\":3,\"text\":\"第三步：按需添加清理（cleanup）函数 \"},{\"url\":\"#how-to-handle-the-effect-firing-twice-in-development\",\"depth\":2,\"text\":\"如何处理在开发环境下 Effect 运行了两次？ \"},{\"url\":\"#controlling-non-react-widgets\",\"depth\":3,\"text\":\"管理非 React 小部件 \"},{\"url\":\"#subscribing-to-events\",\"depth\":3,\"text\":\"订阅事件 \"},{\"url\":\"#triggering-animations\",\"depth\":3,\"text\":\"触发动画 \"},{\"url\":\"#fetching-data\",\"depth\":3,\"text\":\"获取数据 \"},{\"url\":\"#sending-analytics\",\"depth\":3,\"text\":\"发送分析报告 \"},{\"url\":\"#not-an-effect-initializing-the-application\",\"depth\":3,\"text\":\"不适用于 Effect：初始化应用 \"},{\"url\":\"#not-an-effect-buying-a-product\",\"depth\":3,\"text\":\"不适用于 Effect：购买商品 \"},{\"url\":\"#putting-it-all-together\",\"depth\":2,\"text\":\"综合以上内容 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"54\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"有些组件需要与外部系统同步。例如，你可能希望根据 React state 控制非 React 组件、建立服务器连接或当组件在页面显示时发送分析日志。Effect 允许你在渲染结束后执行一些代码，以便将组件与 React 外部的某个系统相同步。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"什么是 Effect\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Effect 与事件（event）有何不同\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何在组件中声明 Effect\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何避免不必要地重新运行 Effect\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"为什么 Effect 在开发环境中会运行两次以及如何解决这个问题\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"what-are-effects-and-how-are-they-different-from-events\",\"children\":\"什么是 Effect，它与事件（event）有何不同？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在接触 Effect 之前，你需要熟悉 React 组件中的两种逻辑类型：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"渲染代码\"}],\"（在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/describing-the-ui\",\"children\":\"描述 UI\"}],\" 中有介绍）位于组件的顶层。你在这里处理 props 和 state，对它们进行转换，并返回希望在页面上显示的 JSX。\",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"渲染代码必须是纯粹的\"}],\"——就像数学公式一样，它只应该“计算”结果，而不做其他任何事情。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"事件处理程序\"}],\"（在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/adding-interactivity\",\"children\":\"添加交互性\"}],\" 中有介绍）是组件内部的嵌套函数，它们不光进行计算, 还会执行一些操作。事件处理程序可能会更新输入字段、提交 HTTP POST 请求来购买产品，或者将用户导航到另一个页面。事件处理程序包含由特定用户操作（例如按钮点击或输入）引起的“副作用”（它们改变了程序的状态）。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"有时这还不够。考虑一个 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件，它在页面上显示时必须连接到聊天服务器。连接到服务器并不是纯粹的计算（它是一个副作用），因此它不能在渲染期间发生。然而，并没有一个特定的事件（比如点击）能让 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 被显示。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Effect 允许你指定由渲染自身，而不是特定事件引起的副作用\"}],\"。在聊天中发送消息是一个“事件”，因为它直接由用户点击特定按钮引起。然而，建立服务器连接是一个 Effect，因为无论哪种交互致使组件出现，它都应该发生。Effect 在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit\",\"children\":\"提交\"}],\" 结束后、页面更新后运行。此时是将 React 组件与外部系统（如网络或第三方库）同步的最佳时机。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"在本文此处和后续文本中，大写的 \",[\"$r\",\"code\",null,{\"children\":\"Effect\"}],\" 是 React 中的专有定义——由渲染引起的副作用。至于更广泛的编程概念(任何改变程序状态或外部系统的行为)，我们则使用“副作用（side effect）” 来指代。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"you-might-not-need-an-effect\",\"children\":\"你可能不需要 Effect \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"不要急着在你的组件中使用 Effect\"}],\"。记住，Effect 通常用于暂时“跳出” React 并与一些 \",[\"$r\",\"strong\",null,{\"children\":\"外部\"}],\" 系统进行同步。这包括浏览器 API、第三方小部件，以及网络等等。如果你的 Effect 只是根据其他状态来调整某些状态，那么 \",[\"$r\",\"a\",null,{\"href\":\"/learn/you-might-not-need-an-effect\",\"children\":\"你可能并不需要一个 Effect\"}],\"。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"how-to-write-an-effect\",\"children\":\"如何编写 Effect \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"要编写一个 Effect, 请遵循以下三个步骤：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"声明 Effect\"}],\"。通常 Effect 会在每次 \",[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit\",\"children\":\"提交\"}],\" 后运行。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"指定 Effect 依赖\"}],\"。大多数 Effect 应该按需运行，而不是在每次渲染后都运行。例如，淡入动画应该只在组件出现时触发。连接和断开服务器的操作只应在组件出现和消失时，或者切换聊天室时执行。你将通过指定 \",[\"$r\",\"strong\",null,{\"children\":\"依赖项\"}],\" 来学习如何控制这一点。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"必要时添加清理操作\"}],\"。一些 Effect 需要指定如何停止、撤销，或者清除它们所执行的操作。例如，“连接”需要“断开”，“订阅”需要“退订”，而“获取数据”需要“取消”或者“忽略”。你将学习如何通过返回一个 \",[\"$r\",\"strong\",null,{\"children\":\"清理函数\"}],\" 来实现这些。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"让我们详细看看每一步。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-declare-an-effect\",\"children\":\"第一步：声明 Effect \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"先从 React 中导入 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" Hook\"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useEffect } from 'react';\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"再在组件顶部调用, 并在其中加入一些代码：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4}\",\"children\":\"function MyComponent() {\\r\\n  useEffect(() => {\\r\\n    // 每次渲染后都会执行此处的代码\\r\\n  });\\r\\n  return <div />;\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"每当你的组件渲染时，React 会先更新页面，然后再运行 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 中的代码。换句话说，\",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 会“延迟”一段代码的运行，直到渲染结果反映在页面上\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，让我们看看如何使用 Effect 来与外部系统同步。考虑一个 \",[\"$r\",\"code\",null,{\"children\":\"<VideoPlayer>\"}],\" React 组件。我们想要通过传递一个 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" prop 来控制它播放或者暂停：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<VideoPlayer isPlaying={isPlaying} />;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个 \",[\"$r\",\"code\",null,{\"children\":\"VideoPlayer\"}],\" 组件渲染了浏览器内置的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<video>\"}]}],\" 标签：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function VideoPlayer({ src, isPlaying }) {\\r\\n  // TODO：使用 isPlaying 做一些事情\\r\\n  return <video src={src} />;\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是，浏览器的 \",[\"$r\",\"code\",null,{\"children\":\"<video>\"}],\" 标签没有 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" 属性。控制它的唯一方式是在 DOM 元素上调用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/play\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"play()\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/pause\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"pause()\"}]}],\" 方法。因此，\",[\"$r\",\"strong\",null,{\"children\":[\"你需要将 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" prop 的值（表示视频当前是否应该播放）与 \",[\"$r\",\"code\",null,{\"children\":\"play()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"pause()\"}],\" 等函数的调用进行同步\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"我们首先需要获取 \",[\"$r\",\"code\",null,{\"children\":\"<video>\"}],\" DOM 节点的 \",[\"$r\",\"a\",null,{\"href\":\"/learn/manipulating-the-dom-with-refs\",\"children\":\"对象引用\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可能会尝试在渲染期间调用 \",[\"$r\",\"code\",null,{\"children\":\"play()\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"pause()\"}],\"，但这样做是不对的：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useRef, useEffect } from 'react';\\r\\n\\r\\nfunction VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  if (isPlaying) {\\r\\n    ref.current.play();  // 渲染期间不能调用 `play()`。 \\r\\n  } else {\\r\\n    ref.current.pause(); // 同样，调用 `pause()` 也不行。\\r\\n  }\\r\\n\\r\\n  return <video ref={ref} src={src} loop playsInline />;\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  const [isPlaying, setIsPlaying] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setIsPlaying(!isPlaying)}>\\r\\n        {isPlaying ? '暂停' : '播放'}\\r\\n      </button>\\r\\n      <VideoPlayer\\r\\n        isPlaying={isPlaying}\\r\\n        src=\\\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\\\"\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { display: block; margin-bottom: 20px; }\\r\\nvideo { width: 250px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"70\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这段代码之所以不对，是因为它试图在渲染期间对 DOM 节点进行操作。在 React 中，\",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"渲染应该是纯粹的计算\"}],\" JSX，不应该包含任何像修改 DOM 这样的副作用。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"而且，当第一次调用 \",[\"$r\",\"code\",null,{\"children\":\"VideoPlayer\"}],\" 时，对应的 DOM 节点还不存在！因为 React 在你返回 JSX 之前不知道要创建什么样的 DOM，所以没有 DOM 节点可以调用 \",[\"$r\",\"code\",null,{\"children\":\"play()\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"pause()\"}],\" 方法。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"解决办法是 \",[\"$r\",\"strong\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 包裹副作用，把它分离到渲染逻辑的计算过程之外\"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,12}\",\"children\":\"import { useEffect, useRef } from 'react';\\r\\n\\r\\nfunction VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  return <video ref={ref} src={src} loop playsInline />;\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"通过将 DOM 更新封装在 Effect 中，你可以让 React 先更新页面，然后再运行 Effect。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当 \",[\"$r\",\"code\",null,{\"children\":\"VideoPlayer\"}],\" 组件渲染时（无论是否为首次渲染），会发生以下几件事：首先 React 会更新页面，确保 \",[\"$r\",\"code\",null,{\"children\":\"<video>\"}],\" 标签带着正确的 props 出现在 DOM 中；接着 React 将运行 Effect；最后 Effect 将根据 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" 的值调用 \",[\"$r\",\"code\",null,{\"children\":\"play()\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"pause()\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"试试点击几次播放和暂停按钮，观察视频播放器的行为是如何与 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" 的值相同步的：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useRef, useEffect } from 'react';\\r\\n\\r\\nfunction VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  return <video ref={ref} src={src} loop playsInline />;\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  const [isPlaying, setIsPlaying] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setIsPlaying(!isPlaying)}>\\r\\n        {isPlaying ? '暂停' : '播放'}\\r\\n      </button>\\r\\n      <VideoPlayer\\r\\n        isPlaying={isPlaying}\\r\\n        src=\\\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\\\"\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { display: block; margin-bottom: 20px; }\\r\\nvideo { width: 250px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"86\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在这个示例中，你同步到 React state 的“外部系统”是浏览器媒体 API。你也可以使用类似的方法将传统的非 React 代码（如 jQuery 插件）封装成声明式的 React 组件。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"需要注意的是，控制视频播放器在实际应用中要复杂得多：比如调用 \",[\"$r\",\"code\",null,{\"children\":\"play()\"}],\" 可能会失败、用户可能会使用内置的浏览器控件来进行播放或暂停等操作。本例子是一个非常简化且不完整的示例。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"默认情况下，Effect 会在 \",[\"$r\",\"strong\",null,{\"children\":\"每次\"}],\" 渲染后运行。\",[\"$r\",\"strong\",null,{\"children\":\"正因如此，以下代码会陷入死循环\"}],\"：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [count, setCount] = useState(0);\\r\\nuseEffect(() => {\\r\\n  setCount(count + 1);\\r\\n});\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"Effect 在渲染结束后运行。更新 state 会触发重新渲染。在 Effect 中直接更新 state 就像是把电源插座的插头插回自身：Effect 运行、更新 state、触发重新渲染、于是又触发 Effect 运行、再次更新 state，继而再次触发重新渲染。如此反复，从而陷入死循环。\"}],[\"$r\",\"p\",null,{\"children\":[\"Effect 应该用于将你的组件与一个 \",[\"$r\",\"strong\",null,{\"children\":\"外部\"}],\" 的系统保持同步。如果没有外部系统，你只是想根据其他状态调整一些状态，那么 \",[\"$r\",\"a\",null,{\"href\":\"/learn/you-might-not-need-an-effect\",\"children\":\"你也许不需要 Effect\"}],\"。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-specify-the-effect-dependencies\",\"children\":\"第二步：指定 Effect 的依赖项 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"默认情况下，Effect 会在 \",[\"$r\",\"strong\",null,{\"children\":\"每次\"}],\" 渲染后运行。但往往 \",[\"$r\",\"strong\",null,{\"children\":\"这并不是你想要的\"}],\"：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"有时，它可能会很慢。与外部系统的同步并不总是即时的，所以你可能希望在不必要时跳过它。例如，你不会想在每次打字时都得重新连接聊天服务器。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"有时，它可能会出错。例如，你不会想在每次按键时都触发组件的淡入动画。动画应该只在组件首次出现时播放。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了演示这个问题，以下是在之前的示例中加入了一些 \",[\"$r\",\"code\",null,{\"children\":\"console.log\"}],\" 调用和一个更新父组件 state 的文本输入框。注意在输入时是如何触发 Effect 重新运行的：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useRef, useEffect } from 'react';\\r\\n\\r\\nfunction VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      console.log('调用 video.play()');\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      console.log('调用 video.pause()');\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  return <video ref={ref} src={src} loop playsInline />;\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  const [isPlaying, setIsPlaying] = useState(false);\\r\\n  const [text, setText] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input value={text} onChange={e => setText(e.target.value)} />\\r\\n      <button onClick={() => setIsPlaying(!isPlaying)}>\\r\\n        {isPlaying ? '暂停' : '播放'}\\r\\n      </button>\\r\\n      <VideoPlayer\\r\\n        isPlaying={isPlaying}\\r\\n        src=\\\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\\\"\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input, button { display: block; margin-bottom: 20px; }\\r\\nvideo { width: 250px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"94\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过在调用 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 时指定一个 \",[\"$r\",\"strong\",null,{\"children\":\"依赖数组\"}],\" 作为第二个参数，你可以让 React \",[\"$r\",\"strong\",null,{\"children\":\"跳过不必要地重新运行 Effect\"}],\"。首先，在上面示例的第 14 行中传入一个空数组 \",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"  useEffect(() => {\\r\\n    // ...\\r\\n  }, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你会看到一个错误提示：\",[\"$r\",\"code\",null,{\"children\":\"React Hook useEffect has a missing dependency: 'isPlaying'\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useRef, useEffect } from 'react';\\r\\n\\r\\nfunction VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      console.log('调用 video.play()');\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      console.log('调用 video.pause()');\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  }, []); // 这将产生错误\\r\\n\\r\\n  return <video ref={ref} src={src} loop playsInline />;\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  const [isPlaying, setIsPlaying] = useState(false);\\r\\n  const [text, setText] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input value={text} onChange={e => setText(e.target.value)} />\\r\\n      <button onClick={() => setIsPlaying(!isPlaying)}>\\r\\n        {isPlaying ? '暂停' : '播放'}\\r\\n      </button>\\r\\n      <VideoPlayer\\r\\n        isPlaying={isPlaying}\\r\\n        src=\\\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\\\"\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input, button { display: block; margin-bottom: 20px; }\\r\\nvideo { width: 250px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"102\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"原因在于，你的 Effect 内部代码依赖于 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" prop 来决定该做什么，但你并没有显式声明这个依赖关系。为了解决这个问题，将 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" 添加至依赖数组中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7}\",\"children\":\"  useEffect(() => {\\r\\n    if (isPlaying) { // isPlaying 在此处使用……\\r\\n      // ...\\r\\n    } else {\\r\\n      // ...\\r\\n    }\\r\\n  }, [isPlaying]); // ……所以它必须在此处声明！\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在所有的依赖都已经声明，所以没有错误了。指定 \",[\"$r\",\"code\",null,{\"children\":\"[isPlaying]\"}],\" 作为依赖数组会告诉 React：如果 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" 与上次渲染时相同，就跳过重新运行 Effect。这样一来，输入框的输入不会触发 Effect 重新运行，只有按下播放/暂停按钮会触发。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useRef, useEffect } from 'react';\\r\\n\\r\\nfunction VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      console.log('调用 video.play()');\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      console.log('调用 video.pause()');\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  }, [isPlaying]);\\r\\n\\r\\n  return <video ref={ref} src={src} loop playsInline />;\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  const [isPlaying, setIsPlaying] = useState(false);\\r\\n  const [text, setText] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input value={text} onChange={e => setText(e.target.value)} />\\r\\n      <button onClick={() => setIsPlaying(!isPlaying)}>\\r\\n        {isPlaying ? '暂停' : '播放'}\\r\\n      </button>\\r\\n      <VideoPlayer\\r\\n        isPlaying={isPlaying}\\r\\n        src=\\\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\\\"\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input, button { display: block; margin-bottom: 20px; }\\r\\nvideo { width: 250px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"128\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"依赖数组可以包含多个依赖项。只有当你指定的 \",[\"$r\",\"strong\",null,{\"children\":\"所有\"}],\" 依赖项的值都与上一次渲染时完全相同，React 才会跳过重新运行该 Effect。React 使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Object.is\"}]}],\" 来比较依赖项的值。有关详细信息，请参阅 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect#reference\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 参考文档\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"请注意，你不能随意“选择”依赖项\"}],\"。如果你指定的依赖项与 React 根据 Effect 内部代码所推断出的依赖项不匹配，你将收到来自 lint 的错误提示。这有助于捕捉代码中的许多 bug。如果你不希望某些代码重新运行，\",[\"$r\",\"a\",null,{\"href\":\"/learn/lifecycle-of-reactive-effects#what-to-do-when-you-dont-want-to-re-synchronize\",\"children\":[\"那么你应当 \",[\"$r\",\"strong\",null,{\"children\":\"修改 Effect 代码本身\"}],\"，使其不再“需要”该依赖项\"]}],\"。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"没有依赖数组和使用空数组 \",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\" 作为依赖数组，行为是不同的：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,7,11}\",\"children\":\"useEffect(() => {\\r\\n  // 这里的代码会在每次渲染后运行\\r\\n});\\r\\n\\r\\nuseEffect(() => {\\r\\n  // 这里的代码只会在组件挂载（首次出现）时运行\\r\\n}, []);\\r\\n\\r\\nuseEffect(() => {\\r\\n  // 这里的代码不但会在组件挂载时运行，而且当 a 或 b 的值自上次渲染后发生变化后也会运行\\r\\n}, [a, b]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"我们会在下一步详细了解什么是 \",[\"$r\",\"strong\",null,{\"children\":\"挂载（mount）\"}],\"。\"]}]]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"why-was-the-ref-omitted-from-the-dependency-array\",\"children\":\"为什么依赖数组中可以省略 ref? \"}],[\"$r\",\"p\",null,{\"children\":[\"下面的 Effect 同时使用了 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" prop，但是只有 \",[\"$r\",\"code\",null,{\"children\":\"isPlaying\"}],\" 被声明为依赖项：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9}\",\"children\":\"function VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  }, [isPlaying]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这是因为 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\" 具有 \",[\"$r\",\"strong\",null,{\"children\":\"稳定\"}],\" 的标识：React 确保你在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useRef#returns\",\"children\":[\"每轮渲染中调用同一个 \",[\"$r\",\"code\",null,{\"children\":\"useRef\"}],\" 时，总能获得相同的对象\"]}],\"。ref 不会改变，所以它不会导致重新运行 Effect。因此，在依赖数组中它可有可无。把它加进去也可以：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9}\",\"children\":\"function VideoPlayer({ src, isPlaying }) {\\r\\n  const ref = useRef(null);\\r\\n  useEffect(() => {\\r\\n    if (isPlaying) {\\r\\n      ref.current.play();\\r\\n    } else {\\r\\n      ref.current.pause();\\r\\n    }\\r\\n  }, [isPlaying, ref]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 返回的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#setstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"set\"}],\" 函数\"]}],\" 也具有稳定的标识，因此它们通常也会被省略。如果在省略某个依赖项时 linter 不会报错，那么这么做就是安全的。\"]}],[\"$r\",\"p\",null,{\"children\":[\"省略始终稳定的依赖项仅在 linter 能“看到”对象是稳定的时候才有效。例如，如果 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\" 是从父组件传递过来的，则必须在依赖数组中指定它。这很有必要，因为你无法确定父组件是一直传递相同的 ref，还是根据条件传递不同的 ref。所以，你的 Effect 会依赖于被传递的是哪个 ref。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-3-add-cleanup-if-needed\",\"children\":\"第三步：按需添加清理（cleanup）函数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"考虑一个不同的例子。假如你正在编写一个 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件，该组件在显示时需要连接到聊天服务器。现在为你提供了 \",[\"$r\",\"code\",null,{\"children\":\"createConnection()\"}],\" API，该 API 返回一个包含 \",[\"$r\",\"code\",null,{\"children\":\"connect()\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"disconnection()\"}],\" 方法的对象。如何确保组件在显示时始终保持连接？\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"从编写 Effect 的逻辑开始：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"useEffect(() => {\\r\\n  const connection = createConnection();\\r\\n  connection.connect();\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果每次重新渲染后都得进行连接，这会很慢，所以你需要添加依赖数组：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"useEffect(() => {\\r\\n  const connection = createConnection();\\r\\n  connection.connect();\\r\\n}, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"由于 Effect 中的代码没有使用任何 props 或 state，所以依赖数组为空数组 \",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"。这告诉 React 仅在组件“挂载”（即首次显示在页面上）时运行此代码\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"试试运行下面的代码：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useEffect } from 'react';\\r\\nimport { createConnection } from './chat.js';\\r\\n\\r\\nexport default function ChatRoom() {\\r\\n  useEffect(() => {\\r\\n    const connection = createConnection();\\r\\n    connection.connect();\\r\\n  }, []);\\r\\n  return <h1>欢迎来到聊天室！</h1>;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection() {\\r\\n  // 真正的实现实际上会连接到服务器\\r\\n  return {\\r\\n    connect() {\\r\\n      console.log('✅ 连接中……');\\r\\n    },\\r\\n    disconnect() {\\r\\n      console.log('❌ 连接断开。');\\r\\n    }\\r\\n  };\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"144\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里的 Effect 仅在组件挂载时运行，所以你可能以为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"✅ 连接中……\\\"\"}],\" 只会在控制台中被打印一次。\",[\"$r\",\"strong\",null,{\"children\":[\"然而实际情况是 \",[\"$r\",\"code\",null,{\"children\":\"\\\"✅ 连接中……\\\"\"}],\" 被打印了两次！为什么会这样\"]}],\"？\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件是一个大型多页面应用中的一部分。用户最初在 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 页面上。组件挂载并调用 \",[\"$r\",\"code\",null,{\"children\":\"connection.connect()\"}],\" 。接着用户可能会导航到另一个页面，比如切换到“设置”页面，于是 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件被卸载。最后，当用户点击“返回”时，\",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件再次挂载。这将建立第二个连接——但第一个连接从未被销毁！随着用户在应用中来回切换，连接将会不断累积。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这类 bug 在没有大量手动测试的情况下很容易被忽略。为了帮助你快速发现它们，在开发环境中，React 会在组件首次挂载后立即重新挂载一次。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"两次出现 \",[\"$r\",\"code\",null,{\"children\":\"\\\"✅ 连接中……\\\"\"}],\" 能够帮助你注意到真正的问题：在代码中，组件被卸载时没有关闭连接。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了解决这个问题，可以在 Effect 中返回一个 \",[\"$r\",\"strong\",null,{\"children\":\"清理（cleanup）函数\"}],\" 。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-6}\",\"children\":\"  useEffect(() => {\\r\\n    const connection = createConnection();\\r\\n    connection.connect();\\r\\n    return () => {\\r\\n      connection.disconnect();\\r\\n    };\\r\\n  }, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 会在每次 Effect 重新运行之前调用清理函数，并在组件卸载（被移除）时最后一次调用清理函数。让我们看看实现清理函数后会发生什么：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\r\\nimport { createConnection } from './chat.js';\\r\\n\\r\\nexport default function ChatRoom() {\\r\\n  useEffect(() => {\\r\\n    const connection = createConnection();\\r\\n    connection.connect();\\r\\n    return () => connection.disconnect();\\r\\n  }, []);\\r\\n  return <h1>欢迎来到聊天室！</h1>;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection() {\\r\\n  // 真正的实现实际上会连接到服务器\\r\\n  return {\\r\\n    connect() {\\r\\n      console.log('✅ 连接中……');\\r\\n    },\\r\\n    disconnect() {\\r\\n      console.log('❌ 连接断开。');\\r\\n    }\\r\\n  };\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"252\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在在开发环境下，你会看到三条控制台日志：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"\\\"✅ 连接中……\\\"\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"\\\"❌ 连接断开。\\\"\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"\\\"✅ 连接中……\\\"\"}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在开发环境下，这是正确的行为\"}],\"。通过重新挂载你的组件，React 验证了离开页面再返回不会导致代码出错。因为本就应该先断开然后再重新连接！如果你很好地实现了清理函数，那么无论是只执行一次 Effect ，还是执行、清理、再执行，都应该没有用户可见的区别。之所以会有额外的一次 connect/disconnect 调用，是因为在开发环境下 React 在检测你代码中的 bug。因此这是正常现象，不要去试图消除它！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在生产环境下，你只会看到 \",[\"$r\",\"code\",null,{\"children\":\"\\\"✅ 连接中……\\\"\"}],\" 打印一次\"]}],\"。这是因为重新挂载组件只会在开发环境下发生，以此帮助你找到需要清理的 Effect。你可以通过关闭 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/StrictMode\",\"children\":\"严格模式\"}],\" 来禁用这个行为，但我们建议保留它。它可以帮助你发现许多类似上述的 bug。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"how-to-handle-the-effect-firing-twice-in-development\",\"children\":\"如何处理在开发环境下 Effect 运行了两次？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 有意在开发环境下重新挂载你的组件，来找到类似上例中的 bug。\",[\"$r\",\"strong\",null,{\"children\":\"你需要思考的不是“如何只运行一次 Effect”，而是“如何修复我的 Effect 来让它在重新挂载后正常运行”\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"通常，答案是实现清理函数。清理函数应该停止或撤销 Effect 所做的一切。原则是用户不应该感受到 Effect 只执行一次（在生产环境中）和连续执行“挂载 → 清理 → 挂载”（在开发环境中）之间的区别。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你将编写的大多数 Effect 都会符合下列的常见模式之一。\"}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"dont-use-refs-to-prevent-effects-from-firing\",\"children\":\"不要使用 ref 来防止触发 Effect \"}],[\"$r\",\"p\",null,{\"children\":[\"为了防止 Effect 在开发环境中触发两次，一个常见错误是使用 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\" 来让 Effect 只运行一次。例如，你可能会用 \",[\"$r\",\"code\",null,{\"children\":\"useRef\"}],\" “修复”上述的 bug：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,3-4}\",\"children\":\"  const connectionRef = useRef(null);\\r\\n  useEffect(() => {\\r\\n    // 🚩 这并不能修复这个 bug！！！\\r\\n    if (!connectionRef.current) {\\r\\n      connectionRef.current = createConnection();\\r\\n      connectionRef.current.connect();\\r\\n    }\\r\\n  }, []);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"它虽然使你在开发环境下只看到一次 \",[\"$r\",\"code\",null,{\"children\":\"“✅ 正在连接...”\"}],\"，但并没有修复这个 bug。\"]}],[\"$r\",\"p\",null,{\"children\":\"当用户离开时，连接没有被关闭，当用户返回时，又会创建一个新的连接。随着用户浏览应用，连接会不断累积，就像“修复”之前一样。\"}],[\"$r\",\"p\",null,{\"children\":\"要修复这个 bug，仅仅让 Effect 只运行一次是不够的。想要 Effect 在重新挂载后正常运行，就得按照之前的方法清除连接。\"}],[\"$r\",\"p\",null,{\"children\":\"请看下面的示例，了解如何处理常见模式。\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"controlling-non-react-widgets\",\"children\":\"管理非 React 小部件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"有时你需要添加不是用 React 实现的 UI 小部件。比如说你想在你的页面添加一个地图组件。它有一个 \",[\"$r\",\"code\",null,{\"children\":\"setZoomLevel()\"}],\" 方法，然后你希望地图的缩放比例和代码中的 \",[\"$r\",\"code\",null,{\"children\":\"zoomLevel\"}],\" state 保持同步。你的 Effect 应该类似于：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"useEffect(() => {\\r\\n  const map = mapRef.current;\\r\\n  map.setZoomLevel(zoomLevel);\\r\\n}, [zoomLevel]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，这种情况下不需要清理操作。在开发环境中，虽然 React 会调用 Effect 两次，但这没关系，因为用相同的值调用 \",[\"$r\",\"code\",null,{\"children\":\"setZoomLevel\"}],\" 两次不会造成任何影响。虽然在开发环境下它可能会稍微慢一些，但问题不大，因为在生产环境下它不会多余地重新挂载。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"有些 API 可能不允许你连续调用两次。例如，内置的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLDialogElement\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<dialog>\"}]}],\" 元素的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLDialogElement/showModal\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"showModal\"}]}],\" 方法在连续被调用两次时会抛出异常。此时可以通过实现清理函数来使其关闭对话框：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"useEffect(() => {\\r\\n  const dialog = dialogRef.current;\\r\\n  dialog.showModal();\\r\\n  return () => dialog.close();\\r\\n}, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在开发环境中，你的 Effect 会先调用 \",[\"$r\",\"code\",null,{\"children\":\"showModal()\"}],\"，然后立即调用 \",[\"$r\",\"code\",null,{\"children\":\"close()\"}],\"，之后再次调用 \",[\"$r\",\"code\",null,{\"children\":\"showModal()\"}],\"。这与在生产环境中只调用一次 \",[\"$r\",\"code\",null,{\"children\":\"showModal()\"}],\" 的用户可见行为是相同的。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"subscribing-to-events\",\"children\":\"订阅事件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你的 Effect 订阅了某些事件，清理函数应退订这些事件：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6}\",\"children\":\"useEffect(() => {\\r\\n  function handleScroll(e) {\\r\\n    console.log(window.scrollX, window.scrollY);\\r\\n  }\\r\\n  window.addEventListener('scroll', handleScroll);\\r\\n  return () => window.removeEventListener('scroll', handleScroll);\\r\\n}, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在开发环境中，你的 Effect 会先调用 \",[\"$r\",\"code\",null,{\"children\":\"addEventListener()\"}],\"，然后立即调用 \",[\"$r\",\"code\",null,{\"children\":\"removeEventListener()\"}],\"，接着再次使用相同的处理函数调用 \",[\"$r\",\"code\",null,{\"children\":\"addEventListener()\"}],\"。因此，每次只会有一个有效订阅。这与在生产环境中只调用一次 \",[\"$r\",\"code\",null,{\"children\":\"addEventListener()\"}],\" 所产生的用户可见行为是相同的。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"triggering-animations\",\"children\":\"触发动画 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你的 Effect 触发了一些动画，清理函数应将动画重置为初始状态：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-6}\",\"children\":\"useEffect(() => {\\r\\n  const node = ref.current;\\r\\n  node.style.opacity = 1; // 触发动画\\r\\n  return () => {\\r\\n    node.style.opacity = 0; // 重置为初始值\\r\\n  };\\r\\n}, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在开发环境中，透明度由 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\" 变为 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"，再变为 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"。这与在生产环境中，直接将其设置为 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\" 具有相同的用户可见行为。如果你使用了支持补间动画的第三方动画库，你的清理函数应将时间轴重置为初始状态。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"fetching-data\",\"children\":\"获取数据 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的 Effect 需要获取数据，清理函数应 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"中止请求\"}],\" 或忽略其结果：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,6,13-15}\",\"children\":\"useEffect(() => {\\r\\n  let ignore = false;\\r\\n\\r\\n  async function startFetching() {\\r\\n    const json = await fetchTodos(userId);\\r\\n    if (!ignore) {\\r\\n      setTodos(json);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  startFetching();\\r\\n\\r\\n  return () => {\\r\\n    ignore = true;\\r\\n  };\\r\\n}, [userId]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你无法“撤销”已经发生的网络请求，但是你的清理函数应当确保那些不再相关的请求不会继续影响你的应用。如果 \",[\"$r\",\"code\",null,{\"children\":\"userId\"}],\" 从 \",[\"$r\",\"code\",null,{\"children\":\"'Alice'\"}],\" 变为 \",[\"$r\",\"code\",null,{\"children\":\"'Bob'\"}],\"，那么请确保 \",[\"$r\",\"code\",null,{\"children\":\"'Alice'\"}],\" 的响应数据被忽略，即使它在 \",[\"$r\",\"code\",null,{\"children\":\"'Bob'\"}],\" 之后到达。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在开发环境中，你会在浏览器调试工具的“网络”选项卡中看到两条请求\"}],\"。这是正常的。使用上述方法，第一个 Effect 将立即被清理，所以它的 \",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 变量会被设置为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。因此，即使有额外的请求，由于有 \",[\"$r\",\"code\",null,{\"children\":\"if (!ignore)\"}],\" 的检查，也不会影响 state。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在生产环境中，只会有一条请求\"}],\"。如果开发环境中的第二次请求给你造成了困扰，最好的办法是使用一个能够对请求去重并缓存响应的方案：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function TodoList() {\\r\\n  const todos = useSomeDataLibrary(`/api/user/${userId}/todos`);\\r\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这不仅可以提高开发体验，还可以让你的应用程序响应更快。例如，当用户点击返回按钮时，不用再等待数据重新加载，因为它已经被缓存。你可以自己构建这样的缓存机制，也可以使用很多在 Effect 中手动获取数据的替代方法。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"what-are-good-alternatives-to-data-fetching-in-effects\",\"children\":\"在 Effect 中进行数据请求的替代方案 \"}],[\"$r\",\"p\",null,{\"children\":[\"在 Effect 中直接编写 \",[\"$r\",\"code\",null,{\"children\":\"fetch\"}],\" 请求 \",[\"$r\",\"a\",null,{\"href\":\"https://www.robinwieruch.de/react-hooks-fetch-data/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"是一种常见的数据获取方式\"}],\"，特别是在完全客户端渲染的应用中。然而，这种方法非常手动化，并且有明显的弊端：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Effect 不会在服务端运行\"}],\"。这意味着最初由服务器渲染的 HTML 只会包含加载状态，而没有实际数据。客户端必须先下载所有的 JavaScript 并渲染应用，才会发现它需要加载数据——这并不高效。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"直接在 Effect 中进行数据请求，容易产生“网络瀑布（network waterfall）”\"}],\"。首先父组件渲染时请求一些数据，随后渲染子组件，接着子组件开始请求它们的数据。如果网络速度不快，这种方式会比并行获取所有数据慢得多。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"直接在 Effect 中进行数据请求往往无法预加载或缓存数据\"}],\"。例如，如果组件卸载后重新挂载，它必须重新获取数据。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"不够简洁\"}],\"。编写 fecth 请求时为了避免 \",[\"$r\",\"a\",null,{\"href\":\"https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"竞态条件（race condition）\"}],\" 等问题，会需要很多样板代码。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"这些弊端并不仅限于 React。任何库在组件挂载时进行数据获取都会遇到这些问题。与路由处理一样，要做好数据获取并非易事，因此我们推荐以下方法：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"如果你正在使用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project#production-grade-react-frameworks\",\"children\":\"框架\"}],\" ，请使用其内置的数据获取机制\"]}],\"。现代 React 框架集成了高效的数据获取机制，不会出现上述问题。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"否则，请考虑使用或构建客户端缓存\"}],\"。流行的开源解决方案包括 \",[\"$r\",\"a\",null,{\"href\":\"https://tanstack.com/query/latest\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Query\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://swr.vercel.app/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"useSWR\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://beta.reactrouter.com/en/main/start/overview\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Router v6.4+\"}],\"。你也可以自己构建解决方案：在底层使用 Effect，但添加对请求的去重、缓存响应以及避免网络瀑布（通过预加载数据或将数据请求提升到路由层次）的逻辑。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"如果这些方法都不适合你，你可以继续直接在 Effect 中获取数据。\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"sending-analytics\",\"children\":\"发送分析报告 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"考虑以下代码，它在页面访问时发送一个分析事件：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"useEffect(() => {\\r\\n  logVisit(url); // 发送 POST 请求\\r\\n}, [url]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在开发环境中，对于每个 URL，\",[\"$r\",\"code\",null,{\"children\":\"logVisit\"}],\" 都会被调用两次，因此你可能会尝试修复这个问题。\",[\"$r\",\"strong\",null,{\"children\":\"我们建议保持不动\"}],\"。与之前示例类似，运行一次还是运行两次，在用户可见的行为上没有区别。从实际角度来看，\",[\"$r\",\"code\",null,{\"children\":\"logVisit\"}],\" 不应该在开发环境中执行任何操作，因为你不会想让开发设备的日志影响生产环境的统计数据。每次保存文件时组件都会重新挂载，因此在开发环境中会记录额外的访问日志。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在生产环境中，不会有重复的访问日志\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了调试发送的分析事件，你可以将应用部署到一个运行在生产模式下的暂存环境，或者暂时禁用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/StrictMode\",\"children\":\"严格模式\"}],\" 及其仅在开发环境中的重新挂载检查。你还可以在路由更改的事件处理程序中发送分析数据，而不是在 Effect 中发送。对于更精确的分析，可以使用\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"交叉观察器\"}],\" 来跟踪哪些组件位于视口中以及它们保持可见的时间。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"not-an-effect-initializing-the-application\",\"children\":\"不适用于 Effect：初始化应用 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"某些逻辑应该只在应用启动时运行一次。你可以将它放在组件外部：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"if (typeof window !== 'undefined') { // 检查是否在浏览器中运行\\r\\n  checkAuthToken();\\r\\n  loadDataFromLocalStorage();\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  // ……\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这可以确保此类逻辑只在浏览器加载页面后运行一次。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"not-an-effect-buying-a-product\",\"children\":\"不适用于 Effect：购买商品 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"有时，即使你编写了清理函数，也无法避免用户观察到 Effect 运行了两次。比如你的 Effect 发送了一个像购买商品这样的 POST 请求：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"useEffect(() => {\\r\\n  // 🔴 错误：此处的 Effect 在开发环境中会触发两次，暴露出代码中的问题。\\r\\n  fetch('/api/buy', { method: 'POST' });\\r\\n}, []);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你肯定不希望购买两次商品。这也是为什么你不应该把这种逻辑放在 Effect 中。如果用户跳转到另一个页面，然后按下“返回”按钮，你的 Effect 就会再次运行。你不希望用户在访问页面时就购买产品，而是在他们点击“购买”按钮时才购买。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"购买操作并不是由渲染引起的，而是由特定的交互引起的。它应该只在用户按下按钮时执行。因此，\",[\"$r\",\"strong\",null,{\"children\":[\"它不应该写在 Effect 中，应当把 \",[\"$r\",\"code\",null,{\"children\":\"/api/buy\"}],\" 请求移动到“购买”按钮的事件处理程序中\"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"  function handleClick() {\\r\\n    // ✅ 购买行为是一个事件，因为它是由特定的交互引起的。\\r\\n    fetch('/api/buy', { method: 'POST' });\\r\\n  }\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"这说明了如果重新挂载破坏了应用的逻辑，通常便暴露了存在的 bug\"}],\"。对用户而言，访问一个页面不应该与访问页面后点击链接、再按下“返回”按钮查看页面有区别。React 通过在开发环境中重新挂载组件来验证你的组件是否遵守这一原则。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"putting-it-all-together\",\"children\":\"综合以上内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这个演练场可以帮助你“感受” Effect 在实际中的工作方式。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个例子使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"setTimeout\"}]}],\" 调度一个日志记录，日志会在 Effect 运行三秒后显示输入的文本。清理函数会取消挂起的延时器。从按下“挂载组件”开始：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\r\\n\\r\\nfunction Playground() {\\r\\n  const [text, setText] = useState('a');\\r\\n\\r\\n  useEffect(() => {\\r\\n    function onTimeout() {\\r\\n      console.log('⏰ ' + text);\\r\\n    }\\r\\n\\r\\n    console.log('🔵 调度 \\\"' + text + '\\\" 日志');\\r\\n    const timeoutId = setTimeout(onTimeout, 3000);\\r\\n\\r\\n    return () => {\\r\\n      console.log('🟡 取消 \\\"' + text + '\\\" 日志');\\r\\n      clearTimeout(timeoutId);\\r\\n    };\\r\\n  }, [text]);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <label>\\r\\n        日志内容：{' '}\\r\\n        <input\\r\\n          value={text}\\r\\n          onChange={e => setText(e.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <h1>{text}</h1>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(!show)}>\\r\\n        {show ? '卸载' : '挂载'}组件\\r\\n      </button>\\r\\n      {show && <hr />}\\r\\n      {show && <Playground />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"268\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你首先会看到三条日志：\",[\"$r\",\"code\",null,{\"children\":\"调度 \\\"a\\\" 日志\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"取消 \\\"a\\\" 日志\"}],\"，再一条 \",[\"$r\",\"code\",null,{\"children\":\"调度 \\\"a\\\" 日志\"}],\"。三秒后，你还会看到一条日志：\",[\"$r\",\"code\",null,{\"children\":\"a\"}],\"。正如你先前所学，额外的调度/取消日志是因为 React 在开发环境中会重新挂载组件一次，以验证你是否正确实现了清理操作。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在编辑输入框，输入 \",[\"$r\",\"code\",null,{\"children\":\"abc\"}],\"。如果输入速度足够快，你会看到 \",[\"$r\",\"code\",null,{\"children\":\"调度 \\\"ab\\\" 日志\"}],\"，紧接着 \",[\"$r\",\"code\",null,{\"children\":\"取消 \\\"ab\\\" 日志\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"调度 \\\"abc\\\" 日志\"}],\"。\",[\"$r\",\"strong\",null,{\"children\":\"React 总是在执行下一轮渲染的 Effect 之前清理上一轮渲染的 Effect\"}],\"。这就是为什么即使你快速输入，最多也只有一个延时器被调度。试试多次编辑输入框，并观察控制台以了解 Effect 是如何被清理的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在输入框中输入一些内容，然后立即按下“卸载组件”。注意卸载组件时是如何清理最后一轮渲染的 Effect 的。在这里，它会在最后一个延迟器要触发之前取消它。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，在上面的代码中注释掉清理函数，这样延时器就不会被取消。尝试快速输入 \",[\"$r\",\"code\",null,{\"children\":\"abcde\"}],\"。你觉得三秒后会发生什么？延时器中的 \",[\"$r\",\"code\",null,{\"children\":\"console.log(text)\"}],\" 会打印 \",[\"$r\",\"strong\",null,{\"children\":\"最新\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\" 值并生成五条 \",[\"$r\",\"code\",null,{\"children\":\"abcde\"}],\" 日志吗？试试看吧，验证一下你的直觉！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"三秒后，你应该会看到一系列的日志：\",[\"$r\",\"code\",null,{\"children\":\"a\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"ab\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"abc\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"abcd\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"abcde\"}],\"，而不是五条 \",[\"$r\",\"code\",null,{\"children\":\"abcde\"}],\" 日志。这是因为 \",[\"$r\",\"strong\",null,{\"children\":[\"每个 Effect 都会“捕获”它对应渲染时的 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\" 值\"]}],\"。即使 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\" 的值发生了变化，渲染时 \",[\"$r\",\"code\",null,{\"children\":\"text = 'ab'\"}],\" 的 Effect 总是会得到 \",[\"$r\",\"code\",null,{\"children\":\"'ab'\"}],\"。换句话说，每个渲染的 Effect 都是相互独立的。如果你对这种机制感兴趣，可以阅读有关 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"闭包\"}],\" 的内容。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"each-render-has-its-own-effects\",\"children\":\"每一轮渲染都有其自己的 Effect \"}],[\"$r\",\"p\",null,{\"children\":[\"你可以将 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 理解为“附加”一段行为到渲染输出中。考虑下面这个 Effect：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function ChatRoom({ roomId }) {\\r\\n  useEffect(() => {\\r\\n    const connection = createConnection(roomId);\\r\\n    connection.connect();\\r\\n    return () => connection.disconnect();\\r\\n  }, [roomId]);\\r\\n\\r\\n  return <h1>欢迎来到 {roomId}！</h1>;\\r\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"让我们看看当用户在应用程序中切换页面时到底发生了什么。\"}],[\"$r\",\"h4\",null,{\"id\":\"initial-render\",\"children\":\"初次渲染 \"}],[\"$r\",\"p\",null,{\"children\":[\"用户访问 \",[\"$r\",\"code\",null,{\"children\":\"<ChatRoom roomId=\\\"general\\\" />\"}],\"。我们 \",[\"$r\",\"a\",null,{\"href\":\"/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time\",\"children\":\"假设\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 的值为 \",[\"$r\",\"code\",null,{\"children\":\"'general'\"}],\" ：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  // 首次渲染时的 JSX（roomId 为 \\\"general\\\"）\\r\\n  return <h1>欢迎来到 general！</h1>;\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Effect 也是渲染输出的一部分\"}],\"。首次渲染的 Effect 变为：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  //首先渲染时的 Effect（roomId 为 \\\"general\\\"）\\r\\n  () => {\\r\\n    const connection = createConnection('general');\\r\\n    connection.connect();\\r\\n    return () => connection.disconnect();\\r\\n  },\\r\\n  // 首次渲染时的依赖项（roomId 为 \\\"general\\\"）\\r\\n  ['general']\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"React 运行这个 Effect 来连接到 \",[\"$r\",\"code\",null,{\"children\":\"'general'\"}],\" 聊天室。\"]}],[\"$r\",\"h4\",null,{\"id\":\"re-render-with-same-dependencies\",\"children\":\"依赖项相同时的重新渲染 \"}],[\"$r\",\"p\",null,{\"children\":[\"假设 \",[\"$r\",\"code\",null,{\"children\":\"<ChatRoom roomId=\\\"general\\\" />\"}],\" 重新渲染。输出的 JSX 不变：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  // 第二次渲染时的 JSX（roomId 为 \\\"general\\\"）\\r\\n  return <h1>Welcome to general!</h1>;\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"React 看到渲染输出没有改变，所以不更新 DOM 。\"}],[\"$r\",\"p\",null,{\"children\":\"第二次渲染的 Effect 如下所示：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  // 第二次渲染时的 Effect（roomId 为 \\\"general\\\"）\\r\\n  () => {\\r\\n    const connection = createConnection('general');\\r\\n    connection.connect();\\r\\n    return () => connection.disconnect();\\r\\n  },\\r\\n  // 第二次渲染时的依赖项（roomId 为 \\\"general\\\"）\\r\\n  ['general']\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"React 将第二次渲染时的 \",[\"$r\",\"code\",null,{\"children\":\"['general']\"}],\" 与第一次渲染时的 \",[\"$r\",\"code\",null,{\"children\":\"['general']\"}],\" 进行比较。\",[\"$r\",\"strong\",null,{\"children\":\"因为所有的依赖项都相同，React 忽略第二次渲染时的 Effect\"}],\"。Effect 不会被调用。\"]}],[\"$r\",\"h4\",null,{\"id\":\"re-render-with-different-dependencies\",\"children\":\"依赖项不同时的重新渲染 \"}],[\"$r\",\"p\",null,{\"children\":[\"接着，用户访问了 \",[\"$r\",\"code\",null,{\"children\":\"<ChatRoom roomId=\\\"travel\\\" />\"}],\"。这一次，组件返回了不同的 JSX：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  // 第三次渲染时的 JSX（roomId 为 \\\"travel\\\"）\\r\\n  return <h1>欢迎来到 travel！</h1>;\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"React 更新 DOM ，将 \",[\"$r\",\"code\",null,{\"children\":\"\\\"欢迎来到 general\\\"\"}],\" 改为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"欢迎来到 travel\\\"\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":\"第三次渲染的 Effect 如下所示：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  // 第三次渲染时的 Effect（roomId 为 \\\"travel\\\"）\\r\\n  () => {\\r\\n    const connection = createConnection('travel');\\r\\n    connection.connect();\\r\\n    return () => connection.disconnect();\\r\\n  },\\r\\n  // 第三次渲染时的依赖项（roomId 为 \\\"travel\\\"）\\r\\n  ['travel']\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"React 将第三次渲染时的 \",[\"$r\",\"code\",null,{\"children\":\"['travel']\"}],\" 与第二次渲染时的 \",[\"$r\",\"code\",null,{\"children\":\"['general']\"}],\" 相比较。发现依赖项不同：\",[\"$r\",\"code\",null,{\"children\":\"Object.is('travel', 'general')\"}],\" 为 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"。因此 Effect 不能被跳过。\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在 React 执行第三次渲染的 Effect 之前，它需要清理上一个运行的 Effect\"}],\"。第二次渲染的 Effect 被跳过了。所以 React 需要清理第一次渲染时的 Effect。如果你回看第一次渲染，你会发现第一次渲染时的清理函数所做的事，是在 \",[\"$r\",\"code\",null,{\"children\":\"createConnection('general')\"}],\" 所创建的连接上调用 \",[\"$r\",\"code\",null,{\"children\":\"disconnect()\"}],\"。也就是从 \",[\"$r\",\"code\",null,{\"children\":\"'general'\"}],\" 聊天室断开连接。\"]}],[\"$r\",\"p\",null,{\"children\":[\"之后，React 执行第三次渲染的 Effect。它连接到 \",[\"$r\",\"code\",null,{\"children\":\"'travel'\"}],\" 聊天室。\"]}],[\"$r\",\"h4\",null,{\"id\":\"unmount\",\"children\":\"组件卸载 \"}],[\"$r\",\"p\",null,{\"children\":[\"最后，假设用户离开了当前页面，\",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件被卸载。React 执行上一个运行的 Effect 的清理函数，也就是第三次渲染时的 Effect。这个清理函数会销毁 \",[\"$r\",\"code\",null,{\"children\":\"createConnection('travel')\"}],\" 所创建的连接。这样，应用与 \",[\"$r\",\"code\",null,{\"children\":\"travel\"}],\" 房间断开了连接。\"]}],[\"$r\",\"h4\",null,{\"id\":\"development-only-behaviors\",\"children\":\"仅开发环境下的行为 \"}],[\"$r\",\"p\",null,{\"children\":[\"开启 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/StrictMode\",\"children\":\"严格模式\"}],\" 时，React 在每次挂载组件后都会重新挂载组件（组件的 state 与 创建的 DOM 都会被保留）。\",[\"$r\",\"a\",null,{\"href\":\"#step-3-add-cleanup-if-needed\",\"children\":\"它可以帮助你找出需要添加清理函数的 Effect\"}],\"，并在早期暴露类似竞态条件这样的 bug。此外，每当你在开发环境中保存文件时，React 也会重新挂载 Effect。这些行为都仅限于开发环境。\"]}]]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"与事件不同，Effect 由渲染本身引起，而非特定的交互。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Effect 允许你将组件与某些外部系统（第三方 API、网络等）同步。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"默认情况下，Effect 在每次渲染（包括初始渲染）后运行。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如果所有依赖项都与上一次渲染时相同，React 会跳过本次 Effect。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你不能“选择”依赖项，它们是由 Effect 内部的代码所决定的。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"空的依赖数组（\",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"）对应于组件的“挂载”，即组件被添加到页面上时。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"仅在严格模式下的开发环境中，React 会挂载两次组件，以对 Effect 进行压力测试。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如果你的 Effect 因为重新挂载而出现问题，那么你需要实现一个清理函数。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React 会在 Effect 再次运行之前和在组件卸载时调用你的清理函数。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"focus-a-field-on-mount\",\"children\":\"挂载后聚焦于表单字段 \"}],[\"$r\",\"p\",null,{\"children\":[\"在下面的例子中，表单中渲染了一个 \",[\"$r\",\"code\",null,{\"children\":\"<MyInput />\"}],\" 组件。\"]}],[\"$r\",\"p\",null,{\"children\":[\"使用输入框的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/focus\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"focus()\"}]}],\" 方法，让 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 在页面上出现时自动聚焦。已经有一个被注释掉的实现，但它并不能正常工作。找出它为什么不起作用，并修复它。如果你熟悉 \",[\"$r\",\"code\",null,{\"children\":\"autoFocus\"}],\" 属性，请假装它不存在：我们正在从头开始实现相同的功能。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js active\",\"children\":\"import { useEffect, useRef } from 'react';\\r\\n\\r\\nexport default function MyInput({ value, onChange }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  // TODO：下面的这种做法不会生效，请修复。\\r\\n  // ref.current.focus()    \\r\\n\\r\\n  return (\\r\\n    <input\\r\\n      ref={ref}\\r\\n      value={value}\\r\\n      onChange={onChange}\\r\\n    />\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\r\\nimport MyInput from './MyInput.js';\\r\\n\\r\\nexport default function Form() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  const [name, setName] = useState('Taylor');\\r\\n  const [upper, setUpper] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(s => !s)}>{show ? '隐藏' : '展示'}表单</button>\\r\\n      <br />\\r\\n      <hr />\\r\\n      {show && (\\r\\n        <>\\r\\n          <label>\\r\\n            输入你的姓名：\\r\\n            <MyInput\\r\\n              value={name}\\r\\n              onChange={e => setName(e.target.value)}\\r\\n            />\\r\\n          </label>\\r\\n          <label>\\r\\n            <input\\r\\n              type=\\\"checkbox\\\"\\r\\n              checked={upper}\\r\\n              onChange={e => setUpper(e.target.checked)}\\r\\n            />\\r\\n            大写\\r\\n          </label>\\r\\n          <p>你好， <b>{upper ? name.toUpperCase() : name}</b></p>\\r\\n        </>\\r\\n      )}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  min-height: 150px;\\r\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"要验证你的方法是否奏效，请点击“展示表单”，并确认输入框获得焦点（高亮显示并且光标位于内部）；再次点击“隐藏表单”和“展示表单”，确认输入框是否再次被高亮显示。\"}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 组件应该只在 \",[\"$r\",\"strong\",null,{\"children\":\"挂载\"}],\" 时获得焦点，而非每次渲染后。为了验证这一行为是否正确，点击“展示表单”，然后反复点击“大写”的复选框。点击复选框时，上方的输入框不应该获得焦点。\"]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"在渲染期间调用 \",[\"$r\",\"code\",null,{\"children\":\"ref.current.focus()\"}],\" 是错误的。因为它是一个“副作用”。副作用应该放在事件处理程序中或通过 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 来声明。在这里，这个副作用是由组件渲染引起的，而不是任何特定的交互引起的，因此应该将它放在 Effect 中。\"]}],[\"$r\",\"p\",null,{\"children\":[\"要修复这个错误，需要将 \",[\"$r\",\"code\",null,{\"children\":\"ref.current.focus()\"}],\" 调用包裹在 Effect 中。然后，为了确保这个 Effect 只在组件挂载时运行，而不是每一轮渲染后都运行，再添加一个空的依赖数组 \",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js active\",\"children\":\"import { useEffect, useRef } from 'react';\\r\\n\\r\\nexport default function MyInput({ value, onChange }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    ref.current.focus();\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <input\\r\\n      ref={ref}\\r\\n      value={value}\\r\\n      onChange={onChange}\\r\\n    />\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\r\\nimport MyInput from './MyInput.js';\\r\\n\\r\\nexport default function Form() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  const [name, setName] = useState('Taylor');\\r\\n  const [upper, setUpper] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(s => !s)}>{show ? '隐藏' : '展示'}表单</button>\\r\\n      <br />\\r\\n      <hr />\\r\\n      {show && (\\r\\n        <>\\r\\n          <label>\\r\\n            输入你的姓名：\\r\\n            <MyInput\\r\\n              value={name}\\r\\n              onChange={e => setName(e.target.value)}\\r\\n            />\\r\\n          </label>\\r\\n          <label>\\r\\n            <input\\r\\n              type=\\\"checkbox\\\"\\r\\n              checked={upper}\\r\\n              onChange={e => setUpper(e.target.checked)}\\r\\n            />\\r\\n            大写\\r\\n          </label>\\r\\n          <p>你好，<b>{upper ? name.toUpperCase() : name}</b></p>\\r\\n        </>\\r\\n      )}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  min-height: 150px;\\r\\n}\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"focus-a-field-conditionally\",\"children\":\"有条件地聚焦于表单字段 \"}],[\"$r\",\"p\",null,{\"children\":[\"下面的表单渲染两个 \",[\"$r\",\"code\",null,{\"children\":\"<MyInput />\"}],\" 组件。\"]}],[\"$r\",\"p\",null,{\"children\":[\"点击“展示表单”后，注意第二个输入框会自动获取焦点。这是因为两个 \",[\"$r\",\"code\",null,{\"children\":\"<MyInput />\"}],\" 组件在内部抢占焦点。当你连续为两个输入框调用 \",[\"$r\",\"code\",null,{\"children\":\"focus()\"}],\" 时，最后一个总会“获胜”。\"]}],[\"$r\",\"p\",null,{\"children\":[\"假设你希望聚焦于第一个输入框。现在，第一个 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 组件接收一个布尔类型的 \",[\"$r\",\"code\",null,{\"children\":\"shouldFocus\"}],\" 属性，且值设置为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。请修改程序逻辑，使得仅当 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 接收到的 \",[\"$r\",\"code\",null,{\"children\":\"shouldFocus\"}],\" 属性为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 时才调用 \",[\"$r\",\"code\",null,{\"children\":\"focus()\"}],\" 。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js active\",\"children\":\"import { useEffect, useRef } from 'react';\\r\\n\\r\\nexport default function MyInput({ shouldFocus, value, onChange }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  // TODO：只在 shouldFocus 为 true 时才调用 focus()\\r\\n  useEffect(() => {\\r\\n    ref.current.focus();\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <input\\r\\n      ref={ref}\\r\\n      value={value}\\r\\n      onChange={onChange}\\r\\n    />\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\r\\nimport MyInput from './MyInput.js';\\r\\n\\r\\nexport default function Form() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  const [firstName, setFirstName] = useState('Taylor');\\r\\n  const [lastName, setLastName] = useState('Swift');\\r\\n  const [upper, setUpper] = useState(false);\\r\\n  const name = firstName + ' ' + lastName;\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(s => !s)}>{show ? '隐藏' : '展示'}表单</button>\\r\\n      <br />\\r\\n      <hr />\\r\\n      {show && (\\r\\n        <>\\r\\n          <label>\\r\\n            输入你的名：\\r\\n            <MyInput\\r\\n              value={firstName}\\r\\n              onChange={e => setFirstName(e.target.value)}\\r\\n              shouldFocus={true}\\r\\n            />\\r\\n          </label>\\r\\n          <label>\\r\\n            输入你的姓：\\r\\n            <MyInput\\r\\n              value={lastName}\\r\\n              onChange={e => setLastName(e.target.value)}\\r\\n              shouldFocus={false}\\r\\n            />\\r\\n          </label>\\r\\n          <p>你好，<b>{upper ? name.toUpperCase() : name}</b></p>\\r\\n        </>\\r\\n      )}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  min-height: 150px;\\r\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"要验证你的方法是否奏效，请重复点击“展示表单”和“隐藏表单”。当表单显示时，只有第一个输入框该获得焦点。因为父组件在渲染第一个输入框时传入了 \",[\"$r\",\"code\",null,{\"children\":\"shouldFocus={true}\"}],\"，而渲染第二个输入框时传入了 \",[\"$r\",\"code\",null,{\"children\":\"shouldFocus={false}\"}],\"。同时，请确认两个输入框都能正常工作并且你都能在其中输入。\"]}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"你不能有条件地声明 Effect，但你的 Effect 中可以包含条件逻辑。\"}]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"在 Effect 中加入条件逻辑。由于你在 Effect 中使用了 \",[\"$r\",\"code\",null,{\"children\":\"shouldFocus\"}],\"，因此需要将它指定为依赖项。这意味着如果某个输入框的 \",[\"$r\",\"code\",null,{\"children\":\"shouldFocus\"}],\" 由 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\" 变为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，它将在挂载后获得焦点。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js active\",\"children\":\"import { useEffect, useRef } from 'react';\\r\\n\\r\\nexport default function MyInput({ shouldFocus, value, onChange }) {\\r\\n  const ref = useRef(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (shouldFocus) {\\r\\n      ref.current.focus();\\r\\n    }\\r\\n  }, [shouldFocus]);\\r\\n\\r\\n  return (\\r\\n    <input\\r\\n      ref={ref}\\r\\n      value={value}\\r\\n      onChange={onChange}\\r\\n    />\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\r\\nimport MyInput from './MyInput.js';\\r\\n\\r\\nexport default function Form() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  const [firstName, setFirstName] = useState('Taylor');\\r\\n  const [lastName, setLastName] = useState('Swift');\\r\\n  const [upper, setUpper] = useState(false);\\r\\n  const name = firstName + ' ' + lastName;\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(s => !s)}>{show ? '隐藏' : '展示'}表单</button>\\r\\n      <br />\\r\\n      <hr />\\r\\n      {show && (\\r\\n        <>\\r\\n          <label>\\r\\n            输入你的名：\\r\\n            <MyInput\\r\\n              value={firstName}\\r\\n              onChange={e => setFirstName(e.target.value)}\\r\\n              shouldFocus={true}\\r\\n            />\\r\\n          </label>\\r\\n          <label>\\r\\n            输入你的姓：\\r\\n            <MyInput\\r\\n              value={lastName}\\r\\n              onChange={e => setLastName(e.target.value)}\\r\\n              shouldFocus={false}\\r\\n            />\\r\\n          </label>\\r\\n          <p>你好，<b>{upper ? name.toUpperCase() : name}</b></p>\\r\\n        </>\\r\\n      )}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  min-height: 150px;\\r\\n}\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-an-interval-that-fires-twice\",\"children\":\"修复会触发两次的定时器 \"}],[\"$r\",\"p\",null,{\"children\":[\"这个 \",[\"$r\",\"code\",null,{\"children\":\"Counter\"}],\" 组件展示了一个每秒递增的计数器。在组件挂载时，它调用了 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/setInterval\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"setInterval\"}]}],\"。这使得 \",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\" 每秒运行一次。\",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\" 函数会递增计数器。\"]}],[\"$r\",\"p\",null,{\"children\":\"然而，计数器不是每秒递增一次，而是两次。这是为什么呢？找出 bug 的原因并修复它。\"}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"请记住，\",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\" 返回一个 interval ID，你可以将它传递给 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"clearInterval\"}]}],\" 来停止这个定时器。\"]}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Counter.js active\",\"children\":\"import { useState, useEffect } from 'react';\\r\\n\\r\\nexport default function Counter() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  useEffect(() => {\\r\\n    function onTick() {\\r\\n      setCount(c => c + 1);\\r\\n    }\\r\\n\\r\\n    setInterval(onTick, 1000);\\r\\n  }, []);\\r\\n\\r\\n  return <h1>{count}</h1>;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\r\\nimport Counter from './Counter.js';\\r\\n\\r\\nexport default function Form() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(s => !s)}>{show ? '隐藏' : '展示'}计数器</button>\\r\\n      <br />\\r\\n      <hr />\\r\\n      {show && <Counter />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  min-height: 150px;\\r\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"当开启 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/StrictMode\",\"children\":\"严格模式\"}],\" 时（例如在本站的示例沙盒（sandbox）中），React 在开发环境中会将每个组件重新挂载一次。这使得计数器组件被挂载了两次，于是定时器也被设置了两次，因此计数器会每秒增加两次。\"]}],[\"$r\",\"p\",null,{\"children\":\"然而，React 的行为并不是导致这个 bug 的根本原因：代码中本就存在这个 bug。React 的行为只是让这个 bug 更加明显。真正的原因是这个 Effect 开启了一个进程但没有提供清理它的方式。\"}],[\"$r\",\"p\",null,{\"children\":[\"要修复这段代码，保存 \",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\" 返回的 interval ID，并使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"clearInterval\"}]}],\" 实现一个清理函数：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Counter.js active\",\"children\":\"import { useState, useEffect } from 'react';\\r\\n\\r\\nexport default function Counter() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  useEffect(() => {\\r\\n    function onTick() {\\r\\n      setCount(c => c + 1);\\r\\n    }\\r\\n\\r\\n    const intervalId = setInterval(onTick, 1000);\\r\\n    return () => clearInterval(intervalId);\\r\\n  }, []);\\r\\n\\r\\n  return <h1>{count}</h1>;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\r\\nimport Counter from './Counter.js';\\r\\n\\r\\nexport default function App() {\\r\\n  const [show, setShow] = useState(false);\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setShow(s => !s)}>{show ? '隐藏' : '展示'}计数器</button>\\r\\n      <br />\\r\\n      <hr />\\r\\n      {show && <Counter />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  min-height: 150px;\\r\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"在开发环境中，React 仍然会重新挂载一次你的组件，以确保你已经正确地实现了清理函数。因此，在调用 \",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\" 后会紧接着调用 \",[\"$r\",\"code\",null,{\"children\":\"clearInterval\"}],\"，然后再调用 \",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\"。在生产环境中，则只调用一次 \",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\"。两种情况下用户可见的行为都是相同的：计数器每秒递增一次。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-fetching-inside-an-effect\",\"children\":\"解决在 Effect 中获取数据的问题 \"}],[\"$r\",\"p\",null,{\"children\":[\"下面这个组件显示所选人物的传记。它在挂载时和每当 \",[\"$r\",\"code\",null,{\"children\":\"person\"}],\" 改变时，通过调用一个异步函数 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio(person)\"}],\" 来加载传记。该异步函数返回一个 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\"，最终解析为一个字符串。当请求结束时，它调用 \",[\"$r\",\"code\",null,{\"children\":\"setBio\"}],\" 以将该字符串显示在选择框下方。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState, useEffect } from 'react';\\r\\nimport { fetchBio } from './api.js';\\r\\n\\r\\nexport default function Page() {\\r\\n  const [person, setPerson] = useState('Alice');\\r\\n  const [bio, setBio] = useState(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    setBio(null);\\r\\n    fetchBio(person).then(result => {\\r\\n      setBio(result);\\r\\n    });\\r\\n  }, [person]);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <select value={person} onChange={e => {\\r\\n        setPerson(e.target.value);\\r\\n      }}>\\r\\n        <option value=\\\"Alice\\\">Alice</option>\\r\\n        <option value=\\\"Bob\\\">Bob</option>\\r\\n        <option value=\\\"Taylor\\\">Taylor</option>\\r\\n      </select>\\r\\n      <hr />\\r\\n      <p><i>{bio ?? '加载中……'}</i></p>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/api.js hidden\",\"children\":\"export async function fetchBio(person) {\\r\\n  const delay = person === 'Bob' ? 2000 : 200;\\r\\n  return new Promise(resolve => {\\r\\n    setTimeout(() => {\\r\\n      resolve('这是' + person + '的传记。');\\r\\n    }, delay);\\r\\n  })\\r\\n}\\r\\n\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"这段代码中有一个 bug。试试先选择 \",[\"$r\",\"code\",null,{\"children\":\"Alice\"}],\"，再选择 \",[\"$r\",\"code\",null,{\"children\":\"Bob\"}],\"，接着立即选择 \",[\"$r\",\"code\",null,{\"children\":\"Taylor\"}],\"。如果操作得足够快，你会观察到这个 bug：虽然 Taylor 被选中了，但下面的一段却说：“这是 Bob 的传记。”\"]}],[\"$r\",\"p\",null,{\"children\":\"为什么会出现这种情况？试试修复这个 Effect 中的 bug。\"}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"如果 Effect 需要异步获取某些数据，它往往需要清理函数。\"}]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"要触发这个 bug，事情需要按以下顺序发生：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"选中 \",[\"$r\",\"code\",null,{\"children\":\"'Bob'\"}],\" 触发 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio('Bob')\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"选中 \",[\"$r\",\"code\",null,{\"children\":\"'Taylor'\"}],\" 触发 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio('Taylor')\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fetchBio('Taylor')\"}],\" 在 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio('Bob')\"}],\" 之前完成。\"]}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"渲染 \",[\"$r\",\"code\",null,{\"children\":\"'Taylor'\"}],\" 时的 Effect 调用 \",[\"$r\",\"code\",null,{\"children\":\"setBio('这是Taylor的传记')\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fetchBio('Bob')\"}],\" 请求完成\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"渲染 \",[\"$r\",\"code\",null,{\"children\":\"'Bob'\"}],\" 时的 Effect 调用 \",[\"$r\",\"code\",null,{\"children\":\"setBio('这是Bob的传记')\"}]]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"这就是为什么即使选择了 Taylor，但显示的仍然是 Bob 的传记。像这样的 bug 被称为 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Race_condition\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"竞态条件\"}],\"，因为两个异步操作在“竞速”，并且可能会以意外的顺序完成。\"]}],[\"$r\",\"p\",null,{\"children\":\"要修复这个 bug，添加一个清理函数：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState, useEffect } from 'react';\\r\\nimport { fetchBio } from './api.js';\\r\\n\\r\\nexport default function Page() {\\r\\n  const [person, setPerson] = useState('Alice');\\r\\n  const [bio, setBio] = useState(null);\\r\\n  useEffect(() => {\\r\\n    let ignore = false;\\r\\n    setBio(null);\\r\\n    fetchBio(person).then(result => {\\r\\n      if (!ignore) {\\r\\n        setBio(result);\\r\\n      }\\r\\n    });\\r\\n    return () => {\\r\\n      ignore = true;\\r\\n    }\\r\\n  }, [person]);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <select value={person} onChange={e => {\\r\\n        setPerson(e.target.value);\\r\\n      }}>\\r\\n        <option value=\\\"Alice\\\">Alice</option>\\r\\n        <option value=\\\"Bob\\\">Bob</option>\\r\\n        <option value=\\\"Taylor\\\">Taylor</option>\\r\\n      </select>\\r\\n      <hr />\\r\\n      <p><i>{bio ?? '加载中……'}</i></p>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/api.js hidden\",\"children\":\"export async function fetchBio(person) {\\r\\n  const delay = person === 'Bob' ? 2000 : 200;\\r\\n  return new Promise(resolve => {\\r\\n    setTimeout(() => {\\r\\n      resolve('这是' + person + '的传记。');\\r\\n    }, delay);\\r\\n  })\\r\\n}\\r\\n\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"每轮渲染的 Effect 都有其独立的 \",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 变量。最初，\",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 变量被设置为 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"。但如果一个 Effect 被清理（例如，当你选择不同的人时），它的 \",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 变量会变为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。因此，请求完成的顺序已经不再重要。只有最后选中的人的 Effect 的 \",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 变量会是 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"，因此它将会调用 \",[\"$r\",\"code\",null,{\"children\":\"setBio(result)\"}],\"。而之前的 Effect 已经被清理，所以 \",[\"$r\",\"code\",null,{\"children\":\"if (!ignore)\"}],\" 的检查会阻止它们调用 \",[\"$r\",\"code\",null,{\"children\":\"setBio\"}],\"：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"选中 \",[\"$r\",\"code\",null,{\"children\":\"'Bob'\"}],\" 触发 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio('Bob')\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"选中 \",[\"$r\",\"code\",null,{\"children\":\"'Taylor'\"}],\" 触发 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio('Taylor')\"}],\"，\",[\"$r\",\"strong\",null,{\"children\":\"并清理之前的（Bob 的） Effect\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fetchBio('Taylor')\"}],\" 在 \",[\"$r\",\"code\",null,{\"children\":\"fetchBio('Bob')\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"之前\"}],\" 完成。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"渲染 \",[\"$r\",\"code\",null,{\"children\":\"'Taylor'\"}],\" 时的 Effect 调用 \",[\"$r\",\"code\",null,{\"children\":\"setBio('这是Taylor的传记')\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fetchBio('Bob')\"}],\" 请求完成\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"渲染 \",[\"$r\",\"code\",null,{\"children\":\"'Bob'\"}],\" 时的 Effect 不会做任何事情，因为它的 \",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 变量被设为了 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"除了忽略过时 API 调用的结果外，你还可以使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"AbortController\"}]}],\" 来取消不再需要的请求。然而，仅凭这一点还不足以防止竞态条件。因为可能在 fetch 之后还有更多的异步操作，因此使用像 \",[\"$r\",\"code\",null,{\"children\":\"ignore\"}],\" 这样的显式标志是解决这类问题最可靠的方法。\"]}]]}]]}]]","meta":{"title":"使用 Effect 进行同步"},"languages":null},"__N_SSG":true}