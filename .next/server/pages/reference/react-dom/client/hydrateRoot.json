{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#hydrateroot\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot(domNode, reactNode, options?)\"}],\" \"]},{\"url\":\"#root-render\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"root.render(reactNode)\"}],\" \"]},{\"url\":\"#root-unmount\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount()\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#hydrating-server-rendered-html\",\"depth\":3,\"text\":\"激活服务端渲染的 HTML \"},{\"url\":\"#hydrating-an-entire-document\",\"depth\":3,\"text\":\"激活整个文档 \"},{\"url\":\"#suppressing-unavoidable-hydration-mismatch-errors\",\"depth\":3,\"text\":\"抑制不可避免的激活处理不匹配错误 \"},{\"url\":\"#handling-different-client-and-server-content\",\"depth\":3,\"text\":\"处理不同的客户端和服务端内容 \"},{\"url\":\"#updating-a-hydrated-root-component\",\"depth\":3,\"text\":\"更新激活根组件 \"},{\"url\":\"#show-a-dialog-for-uncaught-errors\",\"depth\":3,\"text\":\"Show a dialog for uncaught errors \"},{\"url\":\"#displaying-error-boundary-errors\",\"depth\":3,\"text\":\"Displaying Error Boundary errors \"},{\"url\":\"#show-a-dialog-for-recoverable-hydration-mismatch-errors\",\"depth\":3,\"text\":\"Show a dialog for recoverable hydration mismatch errors \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#im-getting-an-error-you-passed-a-second-argument-to-root-render\",\"depth\":3,\"text\":\"I’m getting an error: “You passed a second argument to root.render” \"}]","content":"[[\"$r\",\"MaxWidth\",\"94\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 函数允许你在先前由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom/server\"}]}],\" 生成的浏览器 HTML DOM 节点中展示 React 组件。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const root = hydrateRoot(domNode, reactNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hydrateroot\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot(domNode, reactNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 函数将 React 连接到由 React 在服务端环境中渲染的现有 HTML 中。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\n\\r\\nconst domNode = document.getElementById('root');\\r\\nconst root = hydrateRoot(domNode, reactNode);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将会连接到内部有 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 的 HTML 上，然后接管其中的 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\"。一个完全由 React 构建的应用只会在其根组件中调用一次 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 方法。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\"：一个在服务器端渲染时呈现为根元素的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM 元素\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：用于渲染已存在 HTML 的“React 节点”。这个节点通常是一些类似于 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" 的 JSX，它会在 \",[\"$r\",\"code\",null,{\"children\":\"ReactDOM Server\"}],\" 端使用类似于 \",[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream(<App />)\"}],\" 的方法进行渲染。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\"  \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\"：一个包含此 React 根元素选项的对象。\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"CanaryBadge\",null,{\"title\":\"This feature is only available in the Canary channel\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\": Callback called when React catches an error in an Error Boundary. Called with the \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" caught by the Error Boundary, and an \",[\"$r\",\"code\",null,{\"children\":\"errorInfo\"}],\" object containing the \",[\"$r\",\"code\",null,{\"children\":\"componentStack\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"CanaryBadge\",null,{\"title\":\"This feature is only available in the Canary channel\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\": Callback called when an error is thrown and not caught by an Error Boundary. Called with the \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" that was thrown and an \",[\"$r\",\"code\",null,{\"children\":\"errorInfo\"}],\" object containing the \",[\"$r\",\"code\",null,{\"children\":\"componentStack\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\": Callback called when React automatically recovers from errors. Called with the \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" React throws, and an \",[\"$r\",\"code\",null,{\"children\":\"errorInfo\"}],\" object containing the \",[\"$r\",\"code\",null,{\"children\":\"componentStack\"}],\". Some recoverable errors may include the original error cause as \",[\"$r\",\"code\",null,{\"children\":\"error.cause\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\": A string prefix React uses for IDs generated by \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\".\"]}],\" Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as used on the server.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 返回一个包含两个方法的对象 \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"render\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"#root-unmount\",\"children\":[\"$r\",\"code\",null,{\"children\":\"unmount\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"警告 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}],\" 期望渲染内容与服务端渲染的内容完全相同。你应该将不匹配视为错误并进行修复。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在开发模式下，React 会在激活期间发出不匹配警告。在不匹配的情况下，不能保证内容差异会被修补。出于性能原因，这很重要，因为在大多数应用程序中，不匹配很少见，因此验证所有标记将是昂贵而不可行的。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你的应用程序可能只有一个 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}],\" 函数调用。如果你使用框架，则可能会为你完成此调用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你的应用程序是客户端渲染，并且没有已渲染好的 HTML，则不支持使用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}],\"。请改用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot()\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"root-render\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render(reactNode)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 更新一个激活根组件中的 React 组件来渲染浏览器端 DOM 元素。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将会在激活 \",[\"$r\",\"code\",null,{\"children\":\"root\"}],\" 中更新 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：你想要更新的 “React 节点”。通常这会是一段JSX代码，例如 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\"，但你也可以传递一个通过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createElement()\"}]}],\" 创建的 React 元素，一个字符串，一个数字，\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 值 或者 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 值。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-caveats\",\"children\":\"警告 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你在根节点还没有完成激活的情况下调用了 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\"，React 将清除现有的服务端渲染 HTML 内容，并将整个根节点切换到客户端渲染。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"root-unmount\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount()\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 来销毁 React 根节点内的渲染树。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.unmount();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"完全使用 React 构建的应用通常不会有任何调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 的情况。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这主要适用于 React 根节点的 DOM 节点（或其任何祖先节点）可能会被其他代码从 DOM 中移除的情况。例如，想象一下一个 jQuery 标签面板，它会将非活动标签从 DOM 中移除。如果一个标签被移除，其内部的所有内容（包括其中的 React 根节点）也将从 DOM 中移除。你需要调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 来告诉 React “停止”管理已移除根节点的内容。否则，已移除根节点内的组件将无法清理和释放已使用的资源，例如订阅。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 将卸载根节点中的所有组件，并“分离” React 与根 DOM 节点之间的连接，包括删除树中的任何事件处理程序或状态。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 不接受任何参数。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 值。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-caveats\",\"children\":\"警告 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 将卸载树中的所有组件，并“分离” React 与根 DOM 节点之间的连接。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一旦你调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\"，就不能再在根节点上调用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\"。在未挂载的根节点上尝试调用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 将抛出“不能更新未挂载的根节点”的错误。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hydrating-server-rendered-html\",\"children\":\"激活服务端渲染的 HTML \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的应用程序的 HTML 是由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom/server\"}]}],\" 生成的，你需要在客户端上进行 \",[\"$r\",\"strong\",null,{\"children\":\"hydrate\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"document.getElementById('root')\\\"], [2, 3, \\\"<App />\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\n\\r\\nhydrateRoot(document.getElementById('root'), <App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对于你的应用程序来说，这将激活你的服务端 HTML 来复苏里面的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"浏览器 DOM 节点\"}],\"和 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"React 组件\"}],\"。通常，你只需要在启动时执行一次。如果你使用框架，则可能会自动在幕后执行此操作。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为了进行激活，React 将把你的组件逻辑连接到服务器上生成的初始 HTML 中。激活可以将来自服务器的初始 HTML 快照转换为在浏览器中运行的完全可交互应用。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\r\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\r\\n  由 react-dom/server 生成\\r\\n-->\\r\\n<div id=\\\"root\\\"><h1>Hello, world!</h1><button>You clicked me <!-- -->0<!-- --> times</button></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import './styles.css';\\r\\nimport { hydrateRoot } from 'react-dom/client';\\r\\nimport App from './App.js';\\r\\n\\r\\nhydrateRoot(\\r\\n  document.getElementById('root'),\\r\\n  <App />\\r\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <>\\r\\n      <h1>Hello, world!</h1>\\r\\n      <Counter />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Counter() {\\r\\n  const [count, setCount] = useState(0);\\r\\n  return (\\r\\n    <button onClick={() => setCount(count + 1)}>\\r\\n      You clicked me {count} times\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"120\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你不需要再次调用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 或者在其他地方调用它。从现在开始，React 将管理你的应用程序的 DOM。想要更新 UI 请使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"useState\"}],\" 替代。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"传递给 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 的 React 树必须生成与服务端 \",[\"$r\",\"strong\",null,{\"children\":\"相同的输出\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":\"这对于用户体验非常重要。用户会在你的 JavaScript 代码加载前花费一些时间来查看服务端生成的 HTML。服务端渲染通过显示应用输出的 HTML 快照来产生了应用程序加速加载的错觉。突然出现不同的内容会破坏这种错觉。这就是为什么服务端渲染输出必须与客户端初始渲染输出匹配。\"}],[\"$r\",\"p\",null,{\"children\":\"导致激活错误的最常见原因包括：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"根节点 React 生成的 HTML 周围存在额外的空白符（如换行符）。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在渲染逻辑中使用 \",[\"$r\",\"code\",null,{\"children\":\"typeof window !== 'undefined'\"}],\" 这样的判断。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在渲染逻辑中使用仅限于浏览器端的 API，例如 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"window.matchMedia\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在服务器和客户端渲染不同的数据。\"}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"React 可以从一些激活错误中恢复，但 \",[\"$r\",\"strong\",null,{\"children\":\"你必须像处理其他 bug 一样修复它们\"}],\"。在最好的情况下，它们会导致应用程序加载变慢；在最坏的情况下，事件处理程序可能会附加到错误的元素上。\"]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hydrating-an-entire-document\",\"children\":\"激活整个文档 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"完全使用 React 构建的应用程序可以将整个文档作为 JSX 渲染，包括 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/html\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<html>\"}]}],\" 标签：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,13}\",\"children\":\"function App() {\\r\\n  return (\\r\\n    <html>\\r\\n      <head>\\r\\n        <meta charSet=\\\"utf-8\\\" />\\r\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\r\\n        <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\"></link>\\r\\n        <title>My app</title>\\r\\n      </head>\\r\\n      <body>\\r\\n        <Router />\\r\\n      </body>\\r\\n    </html>\\r\\n  );\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要对整个文档进行激活处理，将全局的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/document\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"document\"}]}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 的第一个参数传递：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\nimport App from './App.js';\\r\\n\\r\\nhydrateRoot(document, <App />);\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"suppressing-unavoidable-hydration-mismatch-errors\",\"children\":\"抑制不可避免的激活处理不匹配错误 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果一个单独元素属性或文本内容在服务器和客户端之间是不可避免地不同的（例如，时间戳），则可以抑制激活处理不匹配警告。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要消除对元素的激活处理警告，请添加 \",[\"$r\",\"code\",null,{\"children\":\"suppressHydrationWarning={true}\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\r\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\r\\n  由 react-dom/server 生成\\r\\n-->\\r\\n<div id=\\\"root\\\"><h1>Current Date: <!-- -->01/01/2020</h1></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import './styles.css';\\r\\nimport { hydrateRoot } from 'react-dom/client';\\r\\nimport App from './App.js';\\r\\n\\r\\nhydrateRoot(document.getElementById('root'), <App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js active\",\"children\":\"export default function App() {\\r\\n  return (\\r\\n    <h1 suppressHydrationWarning={true}>\\r\\n      Current Date: {new Date().toLocaleDateString()}\\r\\n    </h1>\\r\\n  );\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"130\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"此方法仅适用于当前层级，并且旨在作为一种脱围机制。不要滥用它。除非是文本内容，否则 React 不会尝试修补它，因此可能会保持不一致，直到未来的更新来到。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"handling-different-client-and-server-content\",\"children\":\"处理不同的客户端和服务端内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你有意在服务器和客户端上呈现不同的内容，则可以进行两次渲染。在客户端上呈现不同内容的组件可以读取类似于 \",[\"$r\",\"code\",null,{\"children\":\"isClient\"}],\" 的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"状态变量\"}],\"，你可以在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":\"Effect\"}],\" 中将其设置为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\r\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\r\\n  由 react-dom/server 生成\\r\\n-->\\r\\n<div id=\\\"root\\\"><h1>Is Server</h1></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import './styles.css';\\r\\nimport { hydrateRoot } from 'react-dom/client';\\r\\nimport App from './App.js';\\r\\n\\r\\nhydrateRoot(document.getElementById('root'), <App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js active\",\"children\":\"import { useState, useEffect } from \\\"react\\\";\\r\\n\\r\\nexport default function App() {\\r\\n  const [isClient, setIsClient] = useState(false);\\r\\n\\r\\n  useEffect(() => {\\r\\n    setIsClient(true);\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <h1>\\r\\n      {isClient ? 'Is Client' : 'Is Server'}\\r\\n    </h1>\\r\\n  );\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"144\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这样，初始渲染将呈现与服务器相同的内容，避免不匹配，但是在激活之后会同步进行额外的渲染。\"}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"这种方法使得激活变慢，因为你的组件需要渲染两次。要注意在网络连接较慢的情况下用户的体验。JavaScript 代码的加载时间可能会比初始的 HTML 渲染慢很多，因此在激活之后立即呈现不同的 UI 对用户来说可能也会感到不适。\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-a-hydrated-root-component\",\"children\":\"更新激活根组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在根组件激活完成之后，你可以调用 \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"root.render\"}]}],\" 来更新根 React 组件。\",[\"$r\",\"strong\",null,{\"children\":[\"与  \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" 不同的是，通常你不需要这样做，因为初始内容已经渲染为 HTML\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在激活之后某个时刻调用了 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\"，并且组件树结构与之前渲染的相匹配，那么 React 将 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"保留重置 state\"}],\"。请注意，你可以在输入框中输入文字，这意味着在此示例中每秒钟重复调用的 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 不会破坏已有的组件状态：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\r\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\r\\n  由 react-dom/server 生成\\r\\n-->\\r\\n<div id=\\\"root\\\"><h1>Hello, world! <!-- -->0</h1><input placeholder=\\\"Type something here\\\"/></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\nimport './styles.css';\\r\\nimport App from './App.js';\\r\\n\\r\\nconst root = hydrateRoot(\\r\\n  document.getElementById('root'),\\r\\n  <App counter={0} />\\r\\n);\\r\\n\\r\\nlet i = 0;\\r\\nsetInterval(() => {\\r\\n  root.render(<App counter={i} />);\\r\\n  i++;\\r\\n}, 1000);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function App({counter}) {\\r\\n  return (\\r\\n    <>\\r\\n      <h1>Hello, world! {counter}</h1>\\r\\n      <input placeholder=\\\"Type something here\\\" />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"162\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"It is uncommon to call \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"root.render\"}]}],\" on a hydrated root. Usually, you’ll \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"update state\"}],\" inside one of the components instead.\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"show-a-dialog-for-uncaught-errors\",\"children\":\"Show a dialog for uncaught errors \"}],\"\\n\",[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\" is only available in the latest React Canary release.\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"By default, React will log all uncaught errors to the console. To implement your own error reporting, you can provide the optional \",[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\" root option:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 7, \\\"onUncaughtError\\\"], [2, 7, \\\"error\\\", 1], [3, 7, \\\"errorInfo\\\"], [4, 11, \\\"componentStack\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\n\\r\\nconst root = hydrateRoot(\\r\\n  document.getElementById('root'),\\r\\n  <App />,\\r\\n  {\\r\\n    onUncaughtError: (error, errorInfo) => {\\r\\n      console.error(\\r\\n        'Uncaught error',\\r\\n        error,\\r\\n        errorInfo.componentStack\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n);\\r\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"onUncaughtError\"}],\" option is a function called with two arguments:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"error\"}],\" that was thrown.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"An \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"errorInfo\"}],\" object that contains the \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"componentStack\"}],\" of the error.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\" root option to display error dialogs:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n  <title>My app</title>\\r\\n</head>\\r\\n<body>\\r\\n<!--\\r\\n  Error dialog in raw HTML\\r\\n  since an error in the React app may crash.\\r\\n-->\\r\\n<div id=\\\"error-dialog\\\" class=\\\"hidden\\\">\\r\\n  <h1 id=\\\"error-title\\\" class=\\\"text-red\\\"></h1>\\r\\n  <h3>\\r\\n    <pre id=\\\"error-message\\\"></pre>\\r\\n  </h3>\\r\\n  <p>\\r\\n    <pre id=\\\"error-body\\\"></pre>\\r\\n  </p>\\r\\n  <h4 class=\\\"-mb-20\\\">This error occurred at:</h4>\\r\\n  <pre id=\\\"error-component-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  <h4 class=\\\"mb-0\\\">Call stack:</h4>\\r\\n  <pre id=\\\"error-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  <div id=\\\"error-cause\\\">\\r\\n    <h4 class=\\\"mb-0\\\">Caused by:</h4>\\r\\n    <pre id=\\\"error-cause-message\\\"></pre>\\r\\n    <pre id=\\\"error-cause-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  </div>\\r\\n  <button\\r\\n    id=\\\"error-close\\\"\\r\\n    class=\\\"mb-10\\\"\\r\\n    onclick=\\\"document.getElementById('error-dialog').classList.add('hidden')\\\"\\r\\n  >\\r\\n    Close\\r\\n  </button>\\r\\n  <h3 id=\\\"error-not-dismissible\\\">This error is not dismissible.</h3>\\r\\n</div>\\r\\n<!--\\r\\n  HTML content inside <div id=\\\"root\\\">...</div>\\r\\n  was generated from App by react-dom/server.\\r\\n-->\\r\\n<div id=\\\"root\\\"><div><span>This error shows the error dialog:</span><button>Throw error</button></div></div>\\r\\n</body>\\r\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css active\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\r\\nhtml, body { min-height: 300px; }\\r\\n\\r\\n#error-dialog {\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  right: 0;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  background-color: white;\\r\\n  padding: 15px;\\r\\n  opacity: 0.9;\\r\\n  text-wrap: wrap;\\r\\n  overflow: scroll;\\r\\n}\\r\\n\\r\\n.text-red {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n.-mb-20 {\\r\\n  margin-bottom: -20px;\\r\\n}\\r\\n\\r\\n.mb-0 {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.mb-10 {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\npre {\\r\\n  text-wrap: wrap;\\r\\n}\\r\\n\\r\\npre.nowrap {\\r\\n  text-wrap: nowrap;\\r\\n}\\r\\n\\r\\n.hidden {\\r\\n display: none;  \\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/reportError.js hidden\",\"children\":\"function reportError({ title, error, componentStack, dismissable }) {\\r\\n  const errorDialog = document.getElementById(\\\"error-dialog\\\");\\r\\n  const errorTitle = document.getElementById(\\\"error-title\\\");\\r\\n  const errorMessage = document.getElementById(\\\"error-message\\\");\\r\\n  const errorBody = document.getElementById(\\\"error-body\\\");\\r\\n  const errorComponentStack = document.getElementById(\\\"error-component-stack\\\");\\r\\n  const errorStack = document.getElementById(\\\"error-stack\\\");\\r\\n  const errorClose = document.getElementById(\\\"error-close\\\");\\r\\n  const errorCause = document.getElementById(\\\"error-cause\\\");\\r\\n  const errorCauseMessage = document.getElementById(\\\"error-cause-message\\\");\\r\\n  const errorCauseStack = document.getElementById(\\\"error-cause-stack\\\");\\r\\n  const errorNotDismissible = document.getElementById(\\\"error-not-dismissible\\\");\\r\\n  \\r\\n  // Set the title\\r\\n  errorTitle.innerText = title;\\r\\n  \\r\\n  // Display error message and body\\r\\n  const [heading, body] = error.message.split(/\\\\n(.*)/s);\\r\\n  errorMessage.innerText = heading;\\r\\n  if (body) {\\r\\n    errorBody.innerText = body;\\r\\n  } else {\\r\\n    errorBody.innerText = '';\\r\\n  }\\r\\n\\r\\n  // Display component stack\\r\\n  errorComponentStack.innerText = componentStack;\\r\\n\\r\\n  // Display the call stack\\r\\n  // Since we already displayed the message, strip it, and the first Error: line.\\r\\n  errorStack.innerText = error.stack.replace(error.message, '').split(/\\\\n(.*)/s)[1];\\r\\n  \\r\\n  // Display the cause, if available\\r\\n  if (error.cause) {\\r\\n    errorCauseMessage.innerText = error.cause.message;\\r\\n    errorCauseStack.innerText = error.cause.stack;\\r\\n    errorCause.classList.remove('hidden');\\r\\n  } else {\\r\\n    errorCause.classList.add('hidden');\\r\\n  }\\r\\n  // Display the close button, if dismissible\\r\\n  if (dismissable) {\\r\\n    errorNotDismissible.classList.add('hidden');\\r\\n    errorClose.classList.remove(\\\"hidden\\\");\\r\\n  } else {\\r\\n    errorNotDismissible.classList.remove('hidden');\\r\\n    errorClose.classList.add(\\\"hidden\\\");\\r\\n  }\\r\\n  \\r\\n  // Show the dialog\\r\\n  errorDialog.classList.remove(\\\"hidden\\\");\\r\\n}\\r\\n\\r\\nexport function reportCaughtError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Caught Error\\\", error, componentStack,  dismissable: true});\\r\\n}\\r\\n\\r\\nexport function reportUncaughtError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Uncaught Error\\\", error, componentStack, dismissable: false });\\r\\n}\\r\\n\\r\\nexport function reportRecoverableError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Recoverable Error\\\", error, componentStack,  dismissable: true });\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { hydrateRoot } from \\\"react-dom/client\\\";\\r\\nimport App from \\\"./App.js\\\";\\r\\nimport {reportUncaughtError} from \\\"./reportError\\\";\\r\\nimport \\\"./styles.css\\\";\\r\\nimport {renderToString} from 'react-dom/server';\\r\\n\\r\\nconst container = document.getElementById(\\\"root\\\");\\r\\nconst root = hydrateRoot(container, <App />, {\\r\\n  onUncaughtError: (error, errorInfo) => {\\r\\n    if (error.message !== 'Known error') {\\r\\n      reportUncaughtError({\\r\\n        error,\\r\\n        componentStack: errorInfo.componentStack\\r\\n      });\\r\\n    }\\r\\n  }\\r\\n});\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function App() {\\r\\n  const [throwError, setThrowError] = useState(false);\\r\\n  \\r\\n  if (throwError) {\\r\\n    foo.bar = 'baz';\\r\\n  }\\r\\n  \\r\\n  return (\\r\\n    <div>\\r\\n      <span>This error shows the error dialog:</span>\\r\\n      <button onClick={() => setThrowError(true)}>\\r\\n        Throw error\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"canary\\\",\\r\\n    \\\"react-dom\\\": \\\"canary\\\",\\r\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\"\\r\\n  },\\r\\n  \\\"main\\\": \\\"/index.js\\\"\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"178\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-error-boundary-errors\",\"children\":\"Displaying Error Boundary errors \"}],\"\\n\",[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\" is only available in the latest React Canary release.\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"By default, React will log all errors caught by an Error Boundary to \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\". To override this behavior, you can provide the optional \",[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\" root option for errors caught by an \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",\"children\":\"Error Boundary\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 7, \\\"onCaughtError\\\"], [2, 7, \\\"error\\\", 1], [3, 7, \\\"errorInfo\\\"], [4, 11, \\\"componentStack\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\n\\r\\nconst root = hydrateRoot(\\r\\n  document.getElementById('root'),\\r\\n  <App />,\\r\\n  {\\r\\n    onCaughtError: (error, errorInfo) => {\\r\\n      console.error(\\r\\n        'Caught error',\\r\\n        error,\\r\\n        errorInfo.componentStack\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n);\\r\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"onCaughtError\"}],\" option is a function called with two arguments:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"error\"}],\" that was caught by the boundary.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"An \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"errorInfo\"}],\" object that contains the \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"componentStack\"}],\" of the error.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\" root option to display error dialogs or filter known errors from logging:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n  <title>My app</title>\\r\\n</head>\\r\\n<body>\\r\\n<!--\\r\\n  Error dialog in raw HTML\\r\\n  since an error in the React app may crash.\\r\\n-->\\r\\n<div id=\\\"error-dialog\\\" class=\\\"hidden\\\">\\r\\n  <h1 id=\\\"error-title\\\" class=\\\"text-red\\\"></h1>\\r\\n  <h3>\\r\\n    <pre id=\\\"error-message\\\"></pre>\\r\\n  </h3>\\r\\n  <p>\\r\\n    <pre id=\\\"error-body\\\"></pre>\\r\\n  </p>\\r\\n  <h4 class=\\\"-mb-20\\\">This error occurred at:</h4>\\r\\n  <pre id=\\\"error-component-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  <h4 class=\\\"mb-0\\\">Call stack:</h4>\\r\\n  <pre id=\\\"error-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  <div id=\\\"error-cause\\\">\\r\\n    <h4 class=\\\"mb-0\\\">Caused by:</h4>\\r\\n    <pre id=\\\"error-cause-message\\\"></pre>\\r\\n    <pre id=\\\"error-cause-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  </div>\\r\\n  <button\\r\\n    id=\\\"error-close\\\"\\r\\n    class=\\\"mb-10\\\"\\r\\n    onclick=\\\"document.getElementById('error-dialog').classList.add('hidden')\\\"\\r\\n  >\\r\\n    Close\\r\\n  </button>\\r\\n  <h3 id=\\\"error-not-dismissible\\\">This error is not dismissible.</h3>\\r\\n</div>\\r\\n<!--\\r\\n  HTML content inside <div id=\\\"root\\\">...</div>\\r\\n  was generated from App by react-dom/server.\\r\\n-->\\r\\n<div id=\\\"root\\\"><span>This error will not show the error dialog:</span><button>Throw known error</button><span>This error will show the error dialog:</span><button>Throw unknown error</button></div>\\r\\n</body>\\r\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css active\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\r\\nhtml, body { min-height: 300px; }\\r\\n\\r\\n#error-dialog {\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  right: 0;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  background-color: white;\\r\\n  padding: 15px;\\r\\n  opacity: 0.9;\\r\\n  text-wrap: wrap;\\r\\n  overflow: scroll;\\r\\n}\\r\\n\\r\\n.text-red {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n.-mb-20 {\\r\\n  margin-bottom: -20px;\\r\\n}\\r\\n\\r\\n.mb-0 {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.mb-10 {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\npre {\\r\\n  text-wrap: wrap;\\r\\n}\\r\\n\\r\\npre.nowrap {\\r\\n  text-wrap: nowrap;\\r\\n}\\r\\n\\r\\n.hidden {\\r\\n display: none;  \\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/reportError.js hidden\",\"children\":\"function reportError({ title, error, componentStack, dismissable }) {\\r\\n  const errorDialog = document.getElementById(\\\"error-dialog\\\");\\r\\n  const errorTitle = document.getElementById(\\\"error-title\\\");\\r\\n  const errorMessage = document.getElementById(\\\"error-message\\\");\\r\\n  const errorBody = document.getElementById(\\\"error-body\\\");\\r\\n  const errorComponentStack = document.getElementById(\\\"error-component-stack\\\");\\r\\n  const errorStack = document.getElementById(\\\"error-stack\\\");\\r\\n  const errorClose = document.getElementById(\\\"error-close\\\");\\r\\n  const errorCause = document.getElementById(\\\"error-cause\\\");\\r\\n  const errorCauseMessage = document.getElementById(\\\"error-cause-message\\\");\\r\\n  const errorCauseStack = document.getElementById(\\\"error-cause-stack\\\");\\r\\n  const errorNotDismissible = document.getElementById(\\\"error-not-dismissible\\\");\\r\\n  \\r\\n  // Set the title\\r\\n  errorTitle.innerText = title;\\r\\n  \\r\\n  // Display error message and body\\r\\n  const [heading, body] = error.message.split(/\\\\n(.*)/s);\\r\\n  errorMessage.innerText = heading;\\r\\n  if (body) {\\r\\n    errorBody.innerText = body;\\r\\n  } else {\\r\\n    errorBody.innerText = '';\\r\\n  }\\r\\n\\r\\n  // Display component stack\\r\\n  errorComponentStack.innerText = componentStack;\\r\\n\\r\\n  // Display the call stack\\r\\n  // Since we already displayed the message, strip it, and the first Error: line.\\r\\n  errorStack.innerText = error.stack.replace(error.message, '').split(/\\\\n(.*)/s)[1];\\r\\n  \\r\\n  // Display the cause, if available\\r\\n  if (error.cause) {\\r\\n    errorCauseMessage.innerText = error.cause.message;\\r\\n    errorCauseStack.innerText = error.cause.stack;\\r\\n    errorCause.classList.remove('hidden');\\r\\n  } else {\\r\\n    errorCause.classList.add('hidden');\\r\\n  }\\r\\n  // Display the close button, if dismissible\\r\\n  if (dismissable) {\\r\\n    errorNotDismissible.classList.add('hidden');\\r\\n    errorClose.classList.remove(\\\"hidden\\\");\\r\\n  } else {\\r\\n    errorNotDismissible.classList.remove('hidden');\\r\\n    errorClose.classList.add(\\\"hidden\\\");\\r\\n  }\\r\\n  \\r\\n  // Show the dialog\\r\\n  errorDialog.classList.remove(\\\"hidden\\\");\\r\\n}\\r\\n\\r\\nexport function reportCaughtError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Caught Error\\\", error, componentStack,  dismissable: true});\\r\\n}\\r\\n\\r\\nexport function reportUncaughtError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Uncaught Error\\\", error, componentStack, dismissable: false });\\r\\n}\\r\\n\\r\\nexport function reportRecoverableError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Recoverable Error\\\", error, componentStack,  dismissable: true });\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { hydrateRoot } from \\\"react-dom/client\\\";\\r\\nimport App from \\\"./App.js\\\";\\r\\nimport {reportCaughtError} from \\\"./reportError\\\";\\r\\nimport \\\"./styles.css\\\";\\r\\n\\r\\nconst container = document.getElementById(\\\"root\\\");\\r\\nconst root = hydrateRoot(container, <App />, {\\r\\n  onCaughtError: (error, errorInfo) => {\\r\\n    if (error.message !== 'Known error') {\\r\\n      reportCaughtError({\\r\\n        error,\\r\\n        componentStack: errorInfo.componentStack\\r\\n      });\\r\\n    }\\r\\n  }\\r\\n});\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\r\\n\\r\\nexport default function App() {\\r\\n  const [error, setError] = useState(null);\\r\\n  \\r\\n  function handleUnknown() {\\r\\n    setError(\\\"unknown\\\");\\r\\n  }\\r\\n\\r\\n  function handleKnown() {\\r\\n    setError(\\\"known\\\");\\r\\n  }\\r\\n  \\r\\n  return (\\r\\n    <>\\r\\n      <ErrorBoundary\\r\\n        fallbackRender={fallbackRender}\\r\\n        onReset={(details) => {\\r\\n          setError(null);\\r\\n        }}\\r\\n      >\\r\\n        {error != null && <Throw error={error} />}\\r\\n        <span>This error will not show the error dialog:</span>\\r\\n        <button onClick={handleKnown}>\\r\\n          Throw known error\\r\\n        </button>\\r\\n        <span>This error will show the error dialog:</span>\\r\\n        <button onClick={handleUnknown}>\\r\\n          Throw unknown error\\r\\n        </button>\\r\\n      </ErrorBoundary>\\r\\n      \\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction fallbackRender({ resetErrorBoundary }) {\\r\\n  return (\\r\\n    <div role=\\\"alert\\\">\\r\\n      <h3>Error Boundary</h3>\\r\\n      <p>Something went wrong.</p>\\r\\n      <button onClick={resetErrorBoundary}>Reset</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Throw({error}) {\\r\\n  if (error === \\\"known\\\") {\\r\\n    throw new Error('Known error')\\r\\n  } else {\\r\\n    foo.bar = 'baz';\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"canary\\\",\\r\\n    \\\"react-dom\\\": \\\"canary\\\",\\r\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\r\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\r\\n  },\\r\\n  \\\"main\\\": \\\"/index.js\\\"\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"192\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"show-a-dialog-for-recoverable-hydration-mismatch-errors\",\"children\":\"Show a dialog for recoverable hydration mismatch errors \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"When React encounters a hydration mismatch, it will automatically attempt to recover by rendering on the client. By default, React will log hydration mismatch errors to \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\". To override this behavior, you can provide the optional \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\" root option:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 7, \\\"onRecoverableError\\\"], [2, 7, \\\"error\\\", 1], [3, 11, \\\"error.cause\\\", 1], [4, 7, \\\"errorInfo\\\"], [5, 12, \\\"componentStack\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\r\\n\\r\\nconst root = hydrateRoot(\\r\\n  document.getElementById('root'),\\r\\n  <App />,\\r\\n  {\\r\\n    onRecoverableError: (error, errorInfo) => {\\r\\n      console.error(\\r\\n        'Caught error',\\r\\n        error,\\r\\n        error.cause,\\r\\n        errorInfo.componentStack\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"onRecoverableError\"}],\" option is a function called with two arguments:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"error\"}],\" React throws. Some errors may include the original cause as \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"error.cause\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"An \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"errorInfo\"}],\" object that contains the \",[\"$r\",\"CodeStep\",null,{\"step\":5,\"children\":\"componentStack\"}],\" of the error.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\" root option to display error dialogs for hydration mismatches:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n  <title>My app</title>\\r\\n</head>\\r\\n<body>\\r\\n<!--\\r\\n  Error dialog in raw HTML\\r\\n  since an error in the React app may crash.\\r\\n-->\\r\\n<div id=\\\"error-dialog\\\" class=\\\"hidden\\\">\\r\\n  <h1 id=\\\"error-title\\\" class=\\\"text-red\\\"></h1>\\r\\n  <h3>\\r\\n    <pre id=\\\"error-message\\\"></pre>\\r\\n  </h3>\\r\\n  <p>\\r\\n    <pre id=\\\"error-body\\\"></pre>\\r\\n  </p>\\r\\n  <h4 class=\\\"-mb-20\\\">This error occurred at:</h4>\\r\\n  <pre id=\\\"error-component-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  <h4 class=\\\"mb-0\\\">Call stack:</h4>\\r\\n  <pre id=\\\"error-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  <div id=\\\"error-cause\\\">\\r\\n    <h4 class=\\\"mb-0\\\">Caused by:</h4>\\r\\n    <pre id=\\\"error-cause-message\\\"></pre>\\r\\n    <pre id=\\\"error-cause-stack\\\" class=\\\"nowrap\\\"></pre>\\r\\n  </div>\\r\\n  <button\\r\\n    id=\\\"error-close\\\"\\r\\n    class=\\\"mb-10\\\"\\r\\n    onclick=\\\"document.getElementById('error-dialog').classList.add('hidden')\\\"\\r\\n  >\\r\\n    Close\\r\\n  </button>\\r\\n  <h3 id=\\\"error-not-dismissible\\\">This error is not dismissible.</h3>\\r\\n</div>\\r\\n<!--\\r\\n  HTML content inside <div id=\\\"root\\\">...</div>\\r\\n  was generated from App by react-dom/server.\\r\\n-->\\r\\n<div id=\\\"root\\\"><span>Server</span></div>\\r\\n</body>\\r\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css active\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\r\\nhtml, body { min-height: 300px; }\\r\\n\\r\\n#error-dialog {\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  right: 0;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  background-color: white;\\r\\n  padding: 15px;\\r\\n  opacity: 0.9;\\r\\n  text-wrap: wrap;\\r\\n  overflow: scroll;\\r\\n}\\r\\n\\r\\n.text-red {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n.-mb-20 {\\r\\n  margin-bottom: -20px;\\r\\n}\\r\\n\\r\\n.mb-0 {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.mb-10 {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\npre {\\r\\n  text-wrap: wrap;\\r\\n}\\r\\n\\r\\npre.nowrap {\\r\\n  text-wrap: nowrap;\\r\\n}\\r\\n\\r\\n.hidden {\\r\\n display: none;  \\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/reportError.js hidden\",\"children\":\"function reportError({ title, error, componentStack, dismissable }) {\\r\\n  const errorDialog = document.getElementById(\\\"error-dialog\\\");\\r\\n  const errorTitle = document.getElementById(\\\"error-title\\\");\\r\\n  const errorMessage = document.getElementById(\\\"error-message\\\");\\r\\n  const errorBody = document.getElementById(\\\"error-body\\\");\\r\\n  const errorComponentStack = document.getElementById(\\\"error-component-stack\\\");\\r\\n  const errorStack = document.getElementById(\\\"error-stack\\\");\\r\\n  const errorClose = document.getElementById(\\\"error-close\\\");\\r\\n  const errorCause = document.getElementById(\\\"error-cause\\\");\\r\\n  const errorCauseMessage = document.getElementById(\\\"error-cause-message\\\");\\r\\n  const errorCauseStack = document.getElementById(\\\"error-cause-stack\\\");\\r\\n  const errorNotDismissible = document.getElementById(\\\"error-not-dismissible\\\");\\r\\n  \\r\\n  // Set the title\\r\\n  errorTitle.innerText = title;\\r\\n  \\r\\n  // Display error message and body\\r\\n  const [heading, body] = error.message.split(/\\\\n(.*)/s);\\r\\n  errorMessage.innerText = heading;\\r\\n  if (body) {\\r\\n    errorBody.innerText = body;\\r\\n  } else {\\r\\n    errorBody.innerText = '';\\r\\n  }\\r\\n\\r\\n  // Display component stack\\r\\n  errorComponentStack.innerText = componentStack;\\r\\n\\r\\n  // Display the call stack\\r\\n  // Since we already displayed the message, strip it, and the first Error: line.\\r\\n  errorStack.innerText = error.stack.replace(error.message, '').split(/\\\\n(.*)/s)[1];\\r\\n  \\r\\n  // Display the cause, if available\\r\\n  if (error.cause) {\\r\\n    errorCauseMessage.innerText = error.cause.message;\\r\\n    errorCauseStack.innerText = error.cause.stack;\\r\\n    errorCause.classList.remove('hidden');\\r\\n  } else {\\r\\n    errorCause.classList.add('hidden');\\r\\n  }\\r\\n  // Display the close button, if dismissible\\r\\n  if (dismissable) {\\r\\n    errorNotDismissible.classList.add('hidden');\\r\\n    errorClose.classList.remove(\\\"hidden\\\");\\r\\n  } else {\\r\\n    errorNotDismissible.classList.remove('hidden');\\r\\n    errorClose.classList.add(\\\"hidden\\\");\\r\\n  }\\r\\n  \\r\\n  // Show the dialog\\r\\n  errorDialog.classList.remove(\\\"hidden\\\");\\r\\n}\\r\\n\\r\\nexport function reportCaughtError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Caught Error\\\", error, componentStack,  dismissable: true});\\r\\n}\\r\\n\\r\\nexport function reportUncaughtError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Uncaught Error\\\", error, componentStack, dismissable: false });\\r\\n}\\r\\n\\r\\nexport function reportRecoverableError({error, cause, componentStack}) {\\r\\n  reportError({ title: \\\"Recoverable Error\\\", error, componentStack,  dismissable: true });\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { hydrateRoot } from \\\"react-dom/client\\\";\\r\\nimport App from \\\"./App.js\\\";\\r\\nimport {reportRecoverableError} from \\\"./reportError\\\";\\r\\nimport \\\"./styles.css\\\";\\r\\n\\r\\nconst container = document.getElementById(\\\"root\\\");\\r\\nconst root = hydrateRoot(container, <App />, {\\r\\n  onRecoverableError: (error, errorInfo) => {\\r\\n    reportRecoverableError({\\r\\n      error,\\r\\n      cause: error.cause,\\r\\n      componentStack: errorInfo.componentStack\\r\\n    });\\r\\n  }\\r\\n});\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\r\\n\\r\\nexport default function App() {\\r\\n  const [error, setError] = useState(null);\\r\\n  \\r\\n  function handleUnknown() {\\r\\n    setError(\\\"unknown\\\");\\r\\n  }\\r\\n\\r\\n  function handleKnown() {\\r\\n    setError(\\\"known\\\");\\r\\n  }\\r\\n  \\r\\n  return (\\r\\n    <span>{typeof window !== 'undefined' ? 'Client' : 'Server'}</span>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction fallbackRender({ resetErrorBoundary }) {\\r\\n  return (\\r\\n    <div role=\\\"alert\\\">\\r\\n      <h3>Error Boundary</h3>\\r\\n      <p>Something went wrong.</p>\\r\\n      <button onClick={resetErrorBoundary}>Reset</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Throw({error}) {\\r\\n  if (error === \\\"known\\\") {\\r\\n    throw new Error('Known error')\\r\\n  } else {\\r\\n    foo.bar = 'baz';\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"canary\\\",\\r\\n    \\\"react-dom\\\": \\\"canary\\\",\\r\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\r\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\r\\n  },\\r\\n  \\\"main\\\": \\\"/index.js\\\"\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-you-passed-a-second-argument-to-root-render\",\"children\":\"I’m getting an error: “You passed a second argument to root.render” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"A common mistake is to pass the options for \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" to \",[\"$r\",\"code\",null,{\"children\":\"root.render(...)\"}],\":\"]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":\"Warning: You passed a second argument to root.render(…) but it only accepts one argument.\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To fix, pass the root options to \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot(...)\"}],\", not \",[\"$r\",\"code\",null,{\"children\":\"root.render(...)\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5}\",\"children\":\"// 🚩 Wrong: root.render only takes one argument.\\r\\nroot.render(App, {onUncaughtError});\\r\\n\\r\\n// ✅ Correct: pass options to createRoot.\\r\\nconst root = hydrateRoot(container, <App />, {onUncaughtError});\\n\"}]}]]}]]","meta":{"title":"hydrateRoot","translators":["childrentime"]},"languages":null},"__N_SSG":true}